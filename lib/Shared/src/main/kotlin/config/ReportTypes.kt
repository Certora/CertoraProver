/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package config

import log.*
import tac.DumpType

/**
 * My (alex') understanding of the implications of this:
 *  - in `ArtifactManager.dumpCodeArtifacts`, which prints .tac files, we skip dumping when the [isEnabled] function
 *    returns false, which depends on the `-Dtopics` java arg, which enables the [LoggerType]s, which each [ReportType]
 *    is associated with
 *  - in `CodeAsHTML.writeCodeToHTML` we do a string-matching on the file name, which is expected to start with the
 *    name of a [ReportType] and then compare with `Config.isEnabledReport` in order do enable/disable that particular
 *    dump.
 */
enum class ReportTypes(val loggerCategory: LoggerTypes) : DumpType, CategoryName {
    CFG(LoggerTypes.FUNCTION_BUILDER) {
        override fun toFilenamePrefix() = this.toString().uppercase()
    },
    // Final report with counterexample
    REPORT(LoggerTypes.COMMON),
    INTERNAL_FUNCTION_FINDER(LoggerTypes.COMMON),
    RULE(LoggerTypes.SPEC),
    SOL_METHOD_WITH_ASSERTS(LoggerTypes.SPEC),
    // Last TAC before calling solvers in usual Prover mode
    PRESOLVER_RULE(LoggerTypes.SPEC),
    // TAC at the beginning of `EntryPoint.handleGenericFlow` (what we get from solana/wasm frontends)
    GENERIC_FLOW(LoggerTypes.SPEC),
    // TAC before calling toSimpleSimple, but after all the optimizations
    PRESIMPLIFIED_RULE(LoggerTypes.SPEC),
    // TAC of a rule before the optimization passes
    PREOPTIMIZED_RULE(LoggerTypes.SPEC),
    PREINSTRUMENTED_RULE(LoggerTypes.SPEC),
    PRECOMPILE_TO_SIMPLE(LoggerTypes.SPEC),
    POSTCOMPILE_TO_SIMPLE(LoggerTypes.SPEC),
    // TAC after simple-simpling but before last optimization pass
    PRELASTOPT_RULE(LoggerTypes.SPEC),
    // The graphviz/dot dumps of all unsolved splits that we're using to do the coloring for the
    // Report-<rule name>_UnsolvedSplits.html files (whenever a rule timesout).
    UNSOLVED_SPLIT(LoggerTypes.SPLIT),
    // First bytecode after decompilation (TACCmd.EVM)
    JIMPLE(LoggerTypes.DECOMPILER),
    UNOPTIMIZE_HASHES(LoggerTypes.DECOMPILER),
    // First bytecode after decompilation but simplified to TACCmd.Simple
    SIMPLIFIED(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    NO_RECYCLE(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    SIMPLE_HASH(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    XOR_SIMPLE(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    FREE_MEM_POINTER_SCALARIZE(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    FREE_MEM_POINTER_SCALARIZE_CLEANUP(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    ANNOTATION_REMOVER(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    ENV_START_BLOCK(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    DECOMPILER_CLEANUP(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    MORE_META_SRC(LoggerTypes.UI),
    INTERNAL_FUNCTION_ANNOTATED(LoggerTypes.FUNCTION_BUILDER),
    INTERNAL_FUNCTION_VALIDATED(LoggerTypes.FUNCTION_BUILDER),
    DEDUPLICATED(LoggerTypes.OPTIMIZE),
    SOURCE_FINDER_ANNOTATOR(LoggerTypes.FUNCTION_BUILDER),
    INLINED(LoggerTypes.INLINER),
    CALLEE_ANALYSIS(LoggerTypes.INLINER),
    REVERT_MATERIALIZATION(LoggerTypes.INLINER),
    REVERT_PATH_GENERATOR(LoggerTypes.INLINER),
    // TAC after loop unrolling
    UNROLL(LoggerTypes.BMC),
    UNROLL_PRE_CLEANUP(LoggerTypes.BMC),
    UNROLL_REMOVE_UNREACHABLE(LoggerTypes.BMC),
    UNROLL_FIX_JUMP_PCS(LoggerTypes.BMC),
    REMOVE_UNREACHABLE(LoggerTypes.NORMALIZER),
    REMOVE_UNREACHABLE_POST_PTA(LoggerTypes.NORMALIZER),
    UNUSED_ASSIGNMENTS(LoggerTypes.UNUSED_ASSIGNMENTS_OPT),
    MERGED(LoggerTypes.NORMALIZER),
    MERGED_TAC_OPTIMIZATIONS(LoggerTypes.NORMALIZER),
    OPTIMIZE(LoggerTypes.OPTIMIZE),
    OPTIMIZE_BOOL_VARIABLES(LoggerTypes.OPTIMIZE),
    PROPAGATOR_SIMPLIFIER(LoggerTypes.PROPAGATOR_SIMPLIFIER),
    NEGATION_NORMALIZER(LoggerTypes.OPTIMIZE),
    PATTERN_REWRITER(LoggerTypes.PATTERN_REWRITER),
    OPTIMIZE_INFEASIBLE_PATHS(LoggerTypes.OPTIMIZE),
    OPTIMIZE_OVERFLOW(LoggerTypes.OPTIMIZE),
    OPTIMIZE_DIAMONDS(LoggerTypes.OPTIMIZE),
    OPTIMIZE_VALUE_RANGE(LoggerTypes.OPTIMIZE),
    OPTIMIZE_PROPAGATE_CONSTANTS1(LoggerTypes.OPTIMIZE),
    OPTIMIZE_PROPAGATE_CONSTANTS2(LoggerTypes.OPTIMIZE),
    OPTIMIZE_MERGE_BLOCKS(LoggerTypes.OPTIMIZE),
    QUANTIFIER_POLARITY(LoggerTypes.OPTIMIZE),
    SIMPLE_SIMPLE(LoggerTypes.COMMON),
    LONG_COPY_HAVOC_INSTRUMENTATION(LoggerTypes.COMMON),
    INIT_VARS(LoggerTypes.COMMON),
    FOLD_SPLIT_STORES(LoggerTypes.COMMON),
    REMOVE_UNUSED(LoggerTypes.COMMON),
    SINK_OPTIMIZER(LoggerTypes.COMMON),
    RETURN_SYMBOL_OPTIMIZE1(LoggerTypes.OPTIMIZE),
    RETURN_SYMBOL_OPTIMIZE2(LoggerTypes.OPTIMIZE),
    HASH_OPTIMIZE(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE_FOR_ASSERTIONS_PASS(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE1(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE2(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE_BEFORE_PTA(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE_AFTER_PTA(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE_TAC_OPTIMIZATIONS(LoggerTypes.OPTIMIZE),
    ASSERTION_SINK(LoggerTypes.COMMON),
    NONE(LoggerTypes.COMMON),
    UNIQUE_IDS(LoggerTypes.INLINER),
    CALL_CONVENTION(LoggerTypes.INLINER),
    ADD_PROCEDURE(LoggerTypes.INLINER),
    ENV_INSTRUMENT(LoggerTypes.INLINER),
    REVERT_SUMMARIES(LoggerTypes.INLINER),
    RETURNS_TO_SUMMARIES(LoggerTypes.INLINER),
    TRACE_PUSH_POP(LoggerTypes.INLINER),
    ALIAS(LoggerTypes.ALIAS_ANALYSIS),
    INITIALIZATION(LoggerTypes.INITIALIZATION),
    JUMP_COND_NORMALIZATION(LoggerTypes.NORMALIZER),
    SINGLE_SUCC_JUMP_NORMALIZATION(LoggerTypes.NORMALIZER),
    UNREACHABLE_UNPACKING_CODE_FINDER(LoggerTypes.NORMALIZER),
    TYPE(LoggerTypes.INTERNAL_TYPE_CHECKER),
    TYPE_PEEPHOLE(LoggerTypes.INTERNAL_TYPE_CHECKER),
    HOIST_LOOPS(LoggerTypes.LOOP_ANALYSIS),
    ERROR(LoggerTypes.COMMON),
    MEMORY_SPLITTER(LoggerTypes.ALIAS_ANALYSIS),
    MEMORY_GROUPING(LoggerTypes.ALIAS_ANALYSIS),
    MEMORY_OVERLAP_FIXER(LoggerTypes.NORMALIZER),
    MEMORY_SPLITTER_AND_BRANCH_PRUNER(LoggerTypes.ALIAS_ANALYSIS),
    OPTIMIZE_REVERT_STRINGS(LoggerTypes.OPTIMIZE),
    USE_LATEST_FREEMEM(LoggerTypes.NORMALIZER),
    REWRITE_ALLOCATIONS(LoggerTypes.OPTIMIZE),
    REWRITE_ALLOCATIONS_FROM_LOOP_INTERPOLATION(LoggerTypes.ALLOC),
    DSA(LoggerTypes.DSA),
    DSA_TO_SSA(LoggerTypes.DSA),
    UNIQUEIFY_BOUND_VARIABLES(LoggerTypes.NORMALIZER),
    BYTEMAP_SCALARIZER(LoggerTypes.OPTIMIZE),
    STORAGE_ANALYSIS(LoggerTypes.STORAGE_ANALYSIS),
    STORAGE_ANALYSIS_PATH_PRUNING(LoggerTypes.STORAGE_ANALYSIS),
    ABI(LoggerTypes.ABI),
    APPLIED_SUMMARIES1(LoggerTypes.COMMON),
    APPLIED_SUMMARIES2(LoggerTypes.COMMON),
    SUMMARIES_LOOP_ITER(LoggerTypes.COMMON),
    SIMPLE_SUMMARIES1(LoggerTypes.COMMON),
    SIMPLE_SUMMARIES2(LoggerTypes.COMMON),
    SPLIT_STORAGE_VAR_HOISTER(LoggerTypes.STORAGE_SPLITTING),
    INLINED_HOOKS(LoggerTypes.HOOK_INSTRUMENTATION),
    STRONG_INVARIANT_INLINER(LoggerTypes.INLINER),
    GHOST_ANNOTATION(LoggerTypes.INSTRUMENTATION),
    CONSTANT_FOLDING(LoggerTypes.OPTIMIZE),
    COLLAPSE_EMPTY_DSA(LoggerTypes.DSA),
    FIXED_BOOL_COMPARISON(LoggerTypes.INTERNAL_TYPE_CHECKER),
    FIXED_FREE_PTR_READ(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    ADDED_MISSING_FREE_PTR_WRITE(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    TRIVIAL_SUBTRACT_SIMPLIFY(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    PLUS_NEG_31_SIMPLIFY(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    RETSIZE_SIMPLIFY(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    BASIC_ARITH_SIMPLIFY_CONST_SUB_THEN_ADD(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    BASIC_ARITH_SIMPLIFY_POINTER_SIMPLE(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    SUMMARIZE_STORAGE_LENGTH(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    OPTIMIZE_STORAGE_READS(LoggerTypes.OPTIMIZE),
    INSTRUMENT_RETURN_BUFFERS(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    LOOP_SUMMARY_INSTRUMENTATION(LoggerTypes.LOOP_ANALYSIS),
    COPY_LOOP_SUMMARIZATION(LoggerTypes.LOOP_ANALYSIS),
    STORAGE_COPY_LOOP_SUMMARIZATION(LoggerTypes.LOOP_ANALYSIS),
    STORAGE_LOOP_PEELER(LoggerTypes.LOOP_ANALYSIS),
    STORAGE_EVAL_CODEDATA_SLOTS(LoggerTypes.STORAGE_ANALYSIS),
    REORDER_OBJECT_INITIALIZATION(LoggerTypes.INITIALIZATION),
    OBJECT_REORDERING_FENCE(LoggerTypes.INITIALIZATION),
    SHIFT_FREE_POINTER_OPS(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    FUNCTION_ANNOTATIONS_REMOVAL(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    MAP_GETTER_SUMMARIZATION(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    PARTITION_MEMORY(LoggerTypes.OPTIMIZE),
    STORAGE_ADDRESS_RESOLUTION(LoggerTypes.INLINER),
    NORMALIZE_STORAGE_PACKING(LoggerTypes.NORMALIZER),
    SCRATCH_COPY_NORMALIZATION(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    REMOVE_UNUSED_WRITES(LoggerTypes.OPTIMIZE),
    REMOVE_UNUSED_PARTITIONS(LoggerTypes.OPTIMIZE),
    REWRITE_COPY_LOOP(LoggerTypes.OPTIMIZE),
    REMOVE_CALL_ANNOTATIONS(LoggerTypes.OPTIMIZE),
    PATH_OPTIMIZE0(LoggerTypes.OPTIMIZE),
    MATERIALIZE_DISJOINT_HASHES(LoggerTypes.INSTRUMENTATION),
    ASSUME_STRICT_MONOTONIC_FP(LoggerTypes.INSTRUMENTATION),
    ADD_BRANCH_SNIPPETS(LoggerTypes.INSTRUMENTATION),
    INSERT_MAP_DEFINITION(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    INSERT_SCALAR_DEFINITION(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    HEURISTICAL_FOLDING_REMOVE_ANNOTATIONS(LoggerTypes.HEURISTICAL_FOLDING),
    HEURISTICAL_FOLDING_REWRITE(LoggerTypes.HEURISTICAL_FOLDING),
    DIVISION_UNDERAPPROXIMATION(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    DROP_BW_NOPS(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    INSTRUMENT_IMMUTABLES(LoggerTypes.INSTRUMENTATION),
    TERNARY_OPTIMIZE(LoggerTypes.TERNARY_SIMPLIFIER),
    GLOBAL_INLINER1(LoggerTypes.GLOBAL_INLINER),
    GLOBAL_INLINER2(LoggerTypes.GLOBAL_INLINER),
    INTERVALS_OPTIMIZE(LoggerTypes.INTERVALS_SIMPLIFIER),
    EQUALITY_CHECK_NORMALIZATION(LoggerTypes.NORMALIZER),
    INT32_SCRATCH_NORMALIZATION(LoggerTypes.NORMALIZER),
    UNIQUE_SUCCESSOR_REMOVER(LoggerTypes.UNIQUE_SUCCESSOR_REMOVER),
    GENERIC_RULE(LoggerTypes.GENERIC_RULE),
    CONTRACT_LINKING(LoggerTypes.NORMALIZER),
    CODEDATA_CONVERT(LoggerTypes.NORMALIZER),
    EXTCALL_RESOLUTION(LoggerTypes.EXT_CALL_ANALYSIS),
    COMPILED_RULE_CACHE(LoggerTypes.CACHE),
    READ_TRACKING_INSTRUMENTATION(LoggerTypes.INSTRUMENTATION),
    DIGEST(LoggerTypes.CACHE),
    CONVERT_CALL_CORES(LoggerTypes.INLINER),
    NORMALIZE_TRY_CATCH(LoggerTypes.NORMALIZER),
    EXTCODECOPY_HANDLE(LoggerTypes.NORMALIZER),
    DEOPTIMIZE_MULTI_STRUCTS(LoggerTypes.INITIALIZATION),
    SPURIOUS_JUMP_NORMALIZATION(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    EARLY_SUMMARIZATION(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    FREE_POINTER_PROPAGATION(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    OPAQUE_IDENTITY_REMOVAL(LoggerTypes.NORMALIZER),
    OPAQUE_IDENTITY_REMOVAL_2(LoggerTypes.NORMALIZER),
    SBF_TO_TAC(LoggerTypes.SBF),
    DELETION_SUMMARY(LoggerTypes.INSTRUMENTATION),
    TRIVIAL_SHIFT_SIMPLIFY(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    INLINE_DIRECT(LoggerTypes.INLINER),
    INLINE_DELEGATES(LoggerTypes.INLINER),
    TWOSTAGE_PATCHED(LoggerTypes.COMMON),
    NORMALIZE_REDUNDANT_FP_UPDATES(LoggerTypes.NORMALIZER),
    NOTE_MODIFIER_REWRITER(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    AXIOM_INLINING(LoggerTypes.INSTRUMENTATION),
    CANONICALIZE_SCALARSET(LoggerTypes.OPTIMIZE),
    GHOST_SUM_INSTRUMENTER(LoggerTypes.INSTRUMENTATION),
    SNIPPET_REMOVAL(LoggerTypes.PRUNING),
    ENVFREE(LoggerTypes.SPEC),
    CANONICALIZATION(LoggerTypes.SPEC),
    STORAGE_REWRITER(LoggerTypes.INLINER),
    FOUNDRY_ANNOTATION(LoggerTypes.INSTRUMENTATION),
    CONSTRUCTOR_INSTRUMENTATION(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    DYNAMIC_CREATION(LoggerTypes.INLINER),
    WASM_INIT_LOOP_SUMMARIZATION(LoggerTypes.SUMMARIZATION),
    WASM_INIT_LOOP_REWRITE(LoggerTypes.OPTIMIZE),
    MATERIALIZE_CONDITIONAL_TRAPS(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    REWRITE_ASSERTS(LoggerTypes.WASM),
    MATERIALIZE_CONTROL_FLOW(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    SCALARSET_INFERENCE(LoggerTypes.ALIAS_ANALYSIS),
    MATERIALIZE_SUMMARIES_PRE_OPTIMIZAITON(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    MATERIALIZE_SUMMARIES_POST_OPTIMIZAITON(LoggerTypes.WHOLE_CONTRACT_TRANSFORMATION),
    OPTIMIZE_SOROBAN_MEMORY(LoggerTypes.OPTIMIZE),
    SPURIOUS_FP_UPDATE_REMOVAL(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    FP_READ_POST_CALL_REWRITES(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    INSERT_PARTITION_FENCES(LoggerTypes.ALIAS_ANALYSIS),
    RETURN_BUFFER_ANALYSIS(LoggerTypes.PER_FUNCTION_SIMPLIFICATION),
    REMOVE_OPCODE_SUMMARIES(LoggerTypes.ABI),
    ABI_INPUT_MUNGING(LoggerTypes.ABI),
    ABI_ENCODE_REMOVAL(LoggerTypes.ABI),
    ABI_REMOVE_DEAD_ENCODES(LoggerTypes.ABI),
    OBJECT_PATH_MATCHING(LoggerTypes.ABI),
    ABI_ENCODE_REMOVAL_POST_SUMMARY(LoggerTypes.ABI),
    REMOVE_CALLDATA_REFERENCES(LoggerTypes.ABI),
    ADHOC_INTERNAL_RETURN_FIXUP(LoggerTypes.SUMMARIZATION),
    POST_SUMMARIZATION_STORAGE_CLEANUP(LoggerTypes.SUMMARIZATION),
    ARRAY_LENGTH_UPDATE_INSTRUMENTATION(LoggerTypes.ALIAS_ANALYSIS),
    INSTRUMENT_BUFFER_TRACE(LoggerTypes.EQUIVALENCE),
    EQUIVALENCE_CHECK(LoggerTypes.SPEC),
    SIGHASH_PACKING_NORMALIZER(LoggerTypes.NORMALIZER),
    READ_NUMBERING(LoggerTypes.EQUIVALENCE),
    SIGHASH_READ_NORMALIZER(LoggerTypes.EQUIVALENCE),
    OPTIMIZE_WASM_BITOPS(LoggerTypes.OPTIMIZE),
    LOG_FP_REUSE_NORMALIZATION(LoggerTypes.ALLOC),
    BMC_FUNC(LoggerTypes.BOUNDED_MODEL_CHECKER),
    DEFINITE_BUFFER_ANALYSIS(LoggerTypes.EQUIVALENCE)
    ;

    override fun isEnabled(): Boolean = this == NONE || Config.isEnabledLogger(this.loggerCategory) || Config.isEnabledReport(this)
    open fun toFilenamePrefix(): String =
        this.toString().split("_").map { it.lowercase().replaceFirstChar { it.uppercaseChar() } }.joinToString("")

    companion object {
        // using `get()` to save global memory (not claiming I fully know garbage collection, but making sure-er);
        // if you call either of these often, materialize them
        val byLowerCaseName get() = values().associateBy { it.toString().lowercase() }
        val byConfigName get() = values().associateBy { it.configName }
    }
}
