/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package ksp.typeextender

import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.*

class TACTypeExtenderProcessor(val logger: KSPLogger, val codeGenerator: CodeGenerator) : SymbolProcessor {
    val nativeTypes = listOf(
        "Int",
        "java.math.BigInteger",
    )

    private val originalType = "vc.data.ToTACExpr"

    private val cmdCarrierType = "analysis.TACExprWithRequiredCmdsAndDecls<TACCmd.Simple>"

    private val typeList = nativeTypes + originalType + cmdCarrierType

    override fun process(resolver: Resolver): List<KSAnnotated> {
        val exprFact = resolver.getClassDeclarationByName(resolver.getKSNameFromString("vc.data.TACExprFact")) ?: return listOf()
        if(resolver.getNewFiles().none {
                it == exprFact.containingFile
            }) {
            return listOf()
        }
        val instrument = exprFact.getAllFunctions().filter {
            !it.isAbstract && it.parentDeclaration == exprFact && it.parameters.all {
                it.type.resolve().isToTACExpr() && !it.isVararg
            } && (it.extensionReceiver == null || it.extensionReceiver?.resolve()!!.isToTACExpr())
        }
        val outStream = codeGenerator.createNewFile(Dependencies(aggregating = true, sources = arrayOf(exprFact.containingFile!!)), packageName = "vc.data", "TACExprFactExtensions", "kt")
        val outerWriter = outStream.bufferedWriter()
        outerWriter.write("""
            package vc.data

            // this file is automatically generated by ${TACTypeExtenderProcessor::class.qualifiedName}
            // it's output is covered by the license of that file

            import analysis.TACExprWithRequiredCmdsAndDecls
            import datastructures.stdcollections.*

            private fun toTacExprWithDecls(x: TACExprWithRequiredCmdsAndDecls<TACCmd.Simple>) = x
            private fun toTacExprWithDecls(x: ToTACExpr) = TACExprWithRequiredCmdsAndDecls<TACCmd.Simple>(exp = x.toTACExpr(), cmdsToAdd = listOf(), declsToAdd = setOf())
            private fun toTacExprWithDecls(x: java.math.BigInteger) = toTacExprWithDecls(x.asTACExpr)
            private fun toTacExprWithDecls(x: Int) = toTacExprWithDecls(x.asTACExpr)

            private fun toTACExpr(x: ToTACExpr) = x
            private fun toTACExpr(x: java.math.BigInteger) = x.asTACExpr
            private fun toTACExpr(x: Int) = x.asTACExpr

            object TACExprFactoryExtensions : TACExprFact by TACExprFactTypeCheckedOnlyPrimitives {
                operator fun <T> invoke(f: TACExprFactoryExtensions.() -> T) = this.f()
        """.trimIndent())
        outerWriter.newLine()
        var count = 0
        instrument.forEach { funcDecl ->
            val paramNames = listOfNotNull(
                funcDecl.extensionReceiver?.let {
                    "this"
                }
            ) + funcDecl.parameters.map {
                it.name?.asString()!!
            }
            fun generateCrossProduct(
                ty: List<String>,
                ind: Int,
                cb: (String) -> Unit
            ) {
                if(ind == paramNames.size) {
                    if(ty.all { it in nativeTypes } || ty.all { it == originalType }) {
                        return
                    }
                    val isTacWithDecls = ty.any { it == cmdCarrierType }
                    if(isTacWithDecls) {
                        cb(generateTACExprDeclProxy(funcDecl, paramNames.zip(ty)))
                    } else {
                        cb(generateTACExprProxy(funcDecl, paramNames.zip(ty)))
                    }
                } else {
                    for(p in typeList) {
                        generateCrossProduct(ty + p, ind + 1, cb)
                    }
                }
            }
            generateCrossProduct(listOf(), 0) {
                count++
                outerWriter.write(it)
                outerWriter.newLine()
            }
        }
        val maxCount = 1000
        if(count > maxCount) {
            logger.error("Generated an unexpectedly large number of variants: have $count when we expect a max of $maxCount")
        }
        outerWriter.newLine()
        outerWriter.write("}\n")
        outerWriter.flush()
        return listOf()
    }

    private fun generateTACExprProxy(
        func: KSFunctionDeclaration,
        params: List<Pair<String, String>>,
    ) : String {
        return generateProxy(func = func, params = params, returnType = "TACExpr", functionBody = """
            return ${generateDelegatedCall(func, params.map { "toTACExpr(${it.first})" })}
        """.trimIndent())
    }

    private fun KSType.isToTACExpr() : Boolean {
        val decl = this.declaration
        return decl is KSClassDeclaration && decl.qualifiedName?.asString() == originalType
    }

    private fun generateProxy(
        func: KSFunctionDeclaration,
        params: List<Pair<String, String>>,
        returnType: String,
        functionBody: String
    ): String {
        val isInfix = Modifier.INFIX in func.modifiers
        val isExprReceiver = func.extensionReceiver != null
        val funcName = func.simpleName.asString()
        return if(isInfix || isExprReceiver) {
            check(!isInfix || params.size == 2)
            check(!isExprReceiver || params.first().first == "this") {
                params.toString()
            }
            """
                ${if(isInfix) { "infix "} else { "" }}fun ${params.first().second}.$funcName(${params[1].first}: ${params[1].second}): $returnType {
                    $functionBody
                }
            """.trimIndent()
        } else {
            """
                fun $funcName(${params.joinToString(", ") { it.first + ": " + it.second }}): $returnType {
                    $functionBody
                }
            """.trimIndent()
        }
    }

    private fun generateDelegatedCall(
        decl: KSFunctionDeclaration,
        args: List<String>
    ) : String {
        return if(Modifier.INFIX in decl.modifiers || decl.extensionReceiver != null) {
            "${args[0]}.${decl.simpleName.asString()}(${args.drop(1).joinToString(", ")})"
        } else {
            "${decl.simpleName.asString()}(${args.joinToString(", ")})"
        }
    }

    private fun generateTACExprDeclProxy(
        func: KSFunctionDeclaration,
        params: List<Pair<String, String>>,
    ) : String {
        val commandPrefix = mutableListOf<String>()
        var counter = 0
        fun generateExprAndCRD(p: String) : String {
            val tName = "t${counter++}"
            commandPrefix.add(
                """
                    val $tName = toTacExprWithDecls($p)
                    allCommands.addAll($tName.cmdsToAdd)
                    allDecls.addAll($tName.declsToAdd)
                """.trimIndent()
            )
            return "$tName.exp"
        }
        val args = params.map {
            generateExprAndCRD(it.first)
        }
        val functionBody = """
            val allCommands = mutableListOf<TACCmd.Simple>()
            val allDecls = mutableSetOf<TACSymbol.Var>()
            ${commandPrefix.joinToString("\n")}
            val gen_exp = ${generateDelegatedCall(func, args)}
            return TACExprWithRequiredCmdsAndDecls<TACCmd.Simple>(gen_exp, allDecls, allCommands)
        """.trimIndent()
        return generateProxy(func, params, "TACExprWithRequiredCmdsAndDecls<TACCmd.Simple>", functionBody)
    }
}
