{
    "build_script" : "./certora_build",
    "rule": [
        "rule_failing_assert",
        "rule_failing_assert_nested_call",
        "rule_failing_assert_in_branch",
        "rule_failing_assert_in_other_module",
        "rule_failing_assert_column_1",
        "rule_print_tag",
        "rule_print_tag_nested_call",
        "rule_print_values",
        "rule_print_values_nested_call",
        "rule_print_values_in_match",
        "rule_print_u128",
        "rule_print_i128",
        "rule_print_u64_as_fixed_main_body",
        "rule_print_u64_as_fixed_nested_call",
        "rule_print_u64_as_fixed_other_module",
        "rule_print_location_main_body",
        "rule_print_location_nested_call",
        "rule_print_location_in_branch",
        "rule_print_location_in_other_module",
        "rule_attach_location_assert_main_body",
        "rule_attach_location_assert_nested_call",
        "rule_attach_location_assert_other_module",
        "rule_attach_location_print_tag_main_body",
        "rule_attach_location_print_tag_nested_call",
        "rule_attach_location_print_tag_other_module",
        "rule_attach_location_print_value_main_body",
        "rule_attach_location_print_value_nested_call",
        "rule_attach_location_print_value_other_module",
        "rule_nondet_main_body",
        "rule_nondet_nested_call",
        "rule_nondet_other_module",
        "rule_attach_location_nondet_main_body",
        "rule_attach_location_nondet_nested_call",
        "rule_attach_location_nondet_other_module",
        "rule_attach_location_satisfy_main_body",
        "rule_attach_location_satisfy_nested_call",
        "rule_attach_location_satisfy_other_module",
        "rule_vacuity_test_expect_sanity_failure",
        "rule_vacuity_test_expect_sanity_success",
        "rule_multi_assert",
        "rule_passing_with_location",
        "rule_failing_with_location",
        "rule_function_call_in_main_body",
        "rule_nested_function_call_in_main_body",
        "rule_print_simple_struct",
        "rule_print_nested_struct",
        "rule_print_incorrectly_balanced_struct1",
        "rule_print_incorrectly_balanced_struct2",
    ],
    "prover_args" :[
        "-solanaOptimisticJoin true",
        "-solanaOptimisticOverlaps true",
        "-solanaOptimisticMemcpyPromotion true",
        "-solanaOptimisticMemcmp true",
        "-solanaOptimisticNoMemmove true",
        "-solanaAggressiveGlobalDetection true",
        "-solanaPrintDevMsg true",
	"-solanaTACOptimize 0",
        "-solanaMinSizeForCalltrace 0"
    ],
    "rule_sanity": "advanced",
}
