/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package report

import annotations.PollutesGlobalState
import awshelpers.sqs.SQSStream
import config.AWSConfig
import config.Config
import config.component.EventConfig
import datastructures.stdcollections.*
import event.*
import log.Logger
import log.LoggerTypes
import report.EventEnvironmentVars.EventEnvValue.Companion.fromEnvOrLocalDefault
import report.EventEnvironmentVars.EventEnvValue.Companion.fromEnvProperty
import utils.HasKSerializable
import utils.KSerializable
import datastructures.stdcollections.mapOf
import log.ArtifactManagerFactory
import utils.generateUUID
import utils.hashObject

/**
 * This class is used to store environment variables that contain data needed by the event
 * framework, ie JobId.
 */
object EventEnvironmentVars {

    /**
     * Key of the output url system property.
     */
    private const val outputUrlVarName: String = "outputUrl"

    /**
     * Key of the job id url system property.
     */
    private const val jobIdVarName: String = "jobId"

    /**
     * Key of the user id url system property.
     */
    private const val userIdVarName: String = "userId"

    /**
     * Wraps an environment variable value for an event.
     * Allows defining an alternative value when undefined,
     * and defines the default value.
     */
    @KSerializable
    sealed class EventEnvValue: HasKSerializable {
        companion object {
            /**
             * Lift the event environment value to the undefined value ([Undefined]) if the local value isn't defined.
             */
            private fun String?.liftLocalDefault(): EventEnvValue = this?.let(::LocalDefault) ?: Undefined

            /**
             * Returns the value of the environment property ([envProperty]) if it's defined.
             * Otherwise, returns [Undefined].
             */
            fun fromEnvProperty(envProperty: String): EventEnvValue = fromEnvOrLocalDefault(envProperty) { null }

            /**
             * Returns the value of the environment property ([envProperty]) if it's defined.
             * Otherwise, returns the value generated by [default] encapsulated inside [LocalDefault],
             * if this value is not null. Otherwise, returns [Undefined].
             */
            fun fromEnvOrLocalDefault(envProperty: String, default: () -> String?): EventEnvValue =
                System.getProperty(envProperty)?.let { FromEnvProperty(value = it, envProperty = envProperty) }
                    ?: default().liftLocalDefault()
        }

        /**
         * The environment variable event value.
         */
        abstract val value: String

        /**
         * The default value generated for the environment variable if it doesn't have a value.
         */
        @KSerializable
        data class LocalDefault(override val value: String) : EventEnvValue()

        /**
         * The environment variable event value and env property.
         */
        @KSerializable
        data class FromEnvProperty(override val value: String, val envProperty: String) : EventEnvValue()

        /**
         * Defines the expected string in case the value isn't defined.
         */
        @KSerializable
        object Undefined : EventEnvValue() {
            private fun readResolve(): Any = Undefined
            override fun hashCode(): Int = hashObject(this)
            override val value: String
                get() = "undefined"

        }

    }

    /**
     * Url of the output files generated by the job execution.
     */
    val outputUrl: EventEnvValue = fromEnvProperty(outputUrlVarName)

    /**
     * Unique id of the job execution the CVT.
     */
    val jobId: EventEnvValue = fromEnvOrLocalDefault(jobIdVarName) {
        generateUUID().also {
            Logger(LoggerTypes.COMMON).warn { "Environment variable '$jobIdVarName' is empty; using jobId $it" }
        }
    }

    /**
     * The id of the user that executed the job.
     */
    val userId: EventEnvValue = fromEnvProperty(userIdVarName)
}

private fun getCacheFileStream(): Result<FileEventStream>? {
    ArtifactManagerFactory().registerArtifact(
        CacheEvent.EVENT_STREAM_FILE
    )
    return ArtifactManagerFactory().withArtifact(CacheEvent.EVENT_STREAM_FILE) {
        runCatching {
            FileEventStream(
                this@withArtifact,
                JsonFormatter
            )
        }
    }
}
/**
 * This is the events reporter that is used to report events that occur while executing CVT.
 */
lateinit var CVTSystemEventsReporter: EventReporter

@PollutesGlobalState
suspend fun initCVTSystemEventsReporter() {
    CVTSystemEventsReporter = if (EventConfig.EnableEventReporting.get()) {
        val stream = SQSStream.fetchSQSStream(AWSConfig.SQSQueueName.get())
        EventReporter(
            EventStreamMapper(
                // associate event topics with streams
                mapOf(
                    EventTopic.CVT to setOf(stream),
                    EventTopic.Rule to setOf(stream),
                    EventTopic.Cache to
                        if (Config.getIsUseCache()) {
                            setOf(getCacheFileStream())
                        } else {
                            emptySet()
                        }
                )
            )
        )
    } else {
        EmptyEventReporter
    }
}
