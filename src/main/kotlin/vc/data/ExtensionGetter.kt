/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package vc.data

import java.lang.reflect.Method
import java.lang.reflect.Modifier

/**
 * Mixin for accessing extension methods generated by our code generation functionality.
 *
 * USE OF THIS CLASS IS INHERENTLY UNSAFE
 */
interface ExtensionGetter {
    /**
     * Get a reflective handle to the the implementation method associated with the
     * extension class [ext] with this current class. Note that this does NOT work with inheritance,
     * and should only be used on final classes.
     *
     * The returned [Method] object is static, and thus the first argument (the receiver object) must always
     * be null. The other arguments, and the return value of the method, are left up to the particular
     * extension.
     */
    fun getExtensionMethod(ext: String) : Method {
        val nm = this.javaClass.name
        return Class.forName("${nm}\$$ext").declaredMethods.single {
            it.name == "impl" && (it.modifiers and Modifier.STATIC) != 0
        }
    }
}
