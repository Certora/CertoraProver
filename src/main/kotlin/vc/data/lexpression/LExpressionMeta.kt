/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package vc.data.lexpression

import analysis.CmdPointer
import com.certora.collect.*
import tac.MetaKey
import tac.NBId
import utils.HasKSerializable
import utils.KSerializable
import vc.data.LExpression
import vc.data.TACExpr
import java.io.Serializable

/**
 * Used for [LExpression]s that represent the definition of a [PathCondition] that has been pulled
 * out as a top-level conjunction due to [Config.UnsatCoreFriendlyLeino] being set to true.
 */
@KSerializable
@Treapable
data class MetaTopLevelDefOfPathCondition(val source: NBId, val target: NBId) : Serializable, HasKSerializable

/**
 * An annotated [LExpression] originates from the stored top-level path condition.
 */
val META_TOPLVL_PATHCOND = MetaKey<MetaTopLevelDefOfPathCondition>("lexp.toplvlpathcond", erased = true)

/**
 * An annotated [LExpression] originates from the stored top-level [CmdPointer].
 */
val META_TOPLVL_CMD = MetaKey<CmdPointer>("lexp.toplvlcmd", erased = true)

/**
 * An annotated [LExpression] is an assert that is not user defined (e.g. sanity bounds check assert).
 */
val META_AUTO_GENERATED_ASSERT = MetaKey.Nothing("lexp.autoGeneratedAssert")

/**
 * An annotated [LExpression] originates from the stored [CmdPointer].
 */
val META_CMD_PTR = MetaKey<CmdPointer>("lexp.cmdptr", erased = true)

/**
 *
 */
val META_MODEL_TOI = MetaKey<TACExpr>("lexp.model-termofinterest", erased = true)
