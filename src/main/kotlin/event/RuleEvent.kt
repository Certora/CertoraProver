/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package event

import kotlinx.serialization.KSerializer
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import report.TreeViewPath
import report.TreeViewReporter
import spec.cvlast.SpecType
import utils.KSerializable

/**
 * Base event for all Rule related events.
 */
@KSerializable
sealed class RuleEvent : EventBase<EventTopic.Rule>() {

    override val eventTopic: EventTopic.Rule
        get() = EventTopic.Rule

    companion object {

        private fun SpecType.toRuleEventString(): String = when (this) {
            is SpecType.Group -> {
                "Group-${
                    when (this) {
                        is SpecType.Group.InvariantCheck -> "InvariantCheck"
                        SpecType.Group.StaticEnvFree -> "EnvFree"
                    }
                }"
            }

            is SpecType.Single.BuiltIn -> "BuiltIn"

            is SpecType.Single.EnvFree.Static -> "EnvFreeCheck"

            SpecType.Single.FromUser.ImportedSpecFile,
            SpecType.Single.FromUser.SpecFile -> "FromCVLSpec"

            is SpecType.Single.GeneratedFromBasicRule -> {
                "Sanity-${
                    when (this) {
                        is SpecType.Single.GeneratedFromBasicRule.AssertionStructureCheck -> "AssertionStructure"
                        is SpecType.Single.GeneratedFromBasicRule.AssertTautologyCheck -> "AssertionTautology"
                        is SpecType.Single.GeneratedFromBasicRule.TrivialInvariantCheck -> "TrivialInvariant"
                        is SpecType.Single.GeneratedFromBasicRule.VacuityCheck -> "Vacuity"
                        is SpecType.Single.GeneratedFromBasicRule.RedundantRequireCheck -> "RedundantRequire"
                    }
                }"
            }

            SpecType.Single.InCodeAssertions -> "InCodeAssertions"

            is SpecType.Single.InvariantCheck -> {
                "InvariantCheck-${
                    when (this) {
                        is SpecType.Single.InvariantCheck.ExplicitPreservedInductionStep -> "Preserved-Explicit"
                        is SpecType.Single.InvariantCheck.InductionBase -> "InitState"
                        is SpecType.Single.InvariantCheck.GenericPreservedInductionStep -> "Preserved-Generic"
                        is SpecType.Single.InvariantCheck.TransientStorageStep -> "TransientResetStorage"
                    }
                }"
            }

            is SpecType.Single.MultiAssertSubRule -> {
                "MultiAssertCheck-${
                    when (this) {
                        SpecType.Single.MultiAssertSubRule.AutoGenerated -> "AutoGenAssert"
                        is SpecType.Single.MultiAssertSubRule.SpecFile -> "CVLAssert"
                    }
                }"
            }

            is SpecType.Single.SkippedMissingOptionalMethod -> "Skipped"
            is SpecType.Group.ContractRuleType -> "Contract"

        }

    }

    @KSerializable(with = RuleStartEventSerializer::class)
    data class RuleStartEvent(
        val treeViewPath: TreeViewPath.NonEmpty.LastRuleNode,
        val treeViewStatus: TreeViewReporter.TreeViewStatusEnum,
        val specType: SpecType
    ) : RuleEvent() {
        override val eventTypeId: String
            get() = "RuleStartEvent"
    }

    private object RuleStartEventSerializer : KSerializer<RuleStartEvent> {

        override val descriptor: SerialDescriptor = buildClassSerialDescriptor("RuleStartEvent") {
            element("jobId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element("userId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element("treeViewPathHash", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element("ruleId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element("parentRuleId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING), isOptional = true)
            element("treeViewPath", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element(
                "parentTreeViewPathHash",
                PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING)
            )
            element("ruleType", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element("treeLevel", PrimitiveSerialDescriptor("contentString", PrimitiveKind.INT))
            element("status", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
        }

        override fun serialize(encoder: Encoder, value: RuleStartEvent) {
            val composite = encoder.beginStructure(descriptor)
            composite.encodeStringElement(descriptor, 0, value.jobId.value)
            composite.encodeStringElement(descriptor, 1, value.userId.value)
            composite.encodeStringElement(descriptor, 2, value.treeViewPath.asEventAttribute.uniqueId)
            composite.encodeStringElement(descriptor, 3, value.treeViewPath.asEventAttribute.ruleId)
            value.treeViewPath.asEventAttribute.parentRuleId?.let {
                composite.encodeStringElement(descriptor, 4, it)
            }
            composite.encodeStringElement(descriptor, 5, value.treeViewPath.asEventAttribute.stringRepr)
            composite.encodeStringElement(descriptor, 6, value.treeViewPath.asEventAttribute.parentUniqueId)
            composite.encodeStringElement(descriptor, 7, value.specType.toRuleEventString())
            composite.encodeIntElement(descriptor, 8, value.treeViewPath.asEventAttribute.levelOfLastNode)
            composite.encodeStringElement(descriptor, 9, value.treeViewStatus.reportName)
            composite.endStructure(descriptor)
        }

        override fun deserialize(decoder: Decoder): RuleStartEvent {
            throw NotImplementedError("RuleStartEvent is not expected to be deserialized")
        }
    }

    @KSerializable(with = RuleStopEventSerializer::class)
    data class RuleStopEvent(
        val treeViewPath: TreeViewPath.NonEmpty.LastRuleNode,
        val hasChildRules: Boolean,
        val treeViewStatusEnum: TreeViewReporter.TreeViewStatusEnum,
        val isParametric: Boolean,
        val outputFiles: List<String>,
        val duration: Long,
        val cacheHitRatio: Float?
    ): RuleEvent() {

        override val eventTypeId: String
            get() = "RuleStopEvent"
    }

    object RuleStopEventSerializer : KSerializer<RuleStopEvent> {
        override val descriptor: SerialDescriptor = buildClassSerialDescriptor("RuleStopEvent") {
            element("jobId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING), isOptional = false)
            element("userId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING))
            element("treeViewPathHash", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING), isOptional = false)
            element("hasChildren", PrimitiveSerialDescriptor("contentString", PrimitiveKind.BOOLEAN), isOptional = true)
            element("ruleId", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING), isOptional = false)
            element("isParametric", PrimitiveSerialDescriptor("contentString", PrimitiveKind.BOOLEAN), isOptional = true)
            element("outputFiles", ListSerializer(String.serializer()).descriptor, isOptional = false)
            element("cumulativeDuration", PrimitiveSerialDescriptor("contentString", PrimitiveKind.INT), isOptional = true)
            element("parallelDuration", PrimitiveSerialDescriptor("contentString", PrimitiveKind.INT), isOptional = true)
            element("status", PrimitiveSerialDescriptor("contentString", PrimitiveKind.STRING), isOptional = false)
            element("cacheHitRatio", PrimitiveSerialDescriptor("contentString", PrimitiveKind.FLOAT), isOptional = true)
        }
        override fun serialize(encoder: Encoder, value: RuleStopEvent) {
            val composite = encoder.beginStructure(descriptor)
            composite.encodeStringElement(descriptor, 0, value.jobId.value)
            composite.encodeStringElement(descriptor, 1, value.userId.value)
            composite.encodeStringElement(descriptor, 2,value.treeViewPath.asEventAttribute.uniqueId)
            composite.encodeBooleanElement(descriptor, 3, value.hasChildRules)
            composite.encodeStringElement(descriptor, 4, value.treeViewPath.asEventAttribute.ruleId)
            composite.encodeBooleanElement(descriptor, 5, value.isParametric)
            composite.encodeSerializableElement(
                descriptor, 6, ListSerializer(String.serializer()), value.outputFiles)
            composite.encodeIntElement(descriptor, 7, value.duration.toInt().times(1000))
            composite.encodeIntElement(descriptor, 8, 0)
            composite.encodeStringElement(descriptor, 9, value.treeViewStatusEnum.reportName)
            if (value.cacheHitRatio != null) {
                composite.encodeFloatElement(descriptor, 10, value.cacheHitRatio)
            }
            composite.endStructure(descriptor)
        }

        override fun deserialize(decoder: Decoder): RuleStopEvent {
            throw NotImplementedError("RuleStopEvent is not expected to be deserialized")
        }
    }

}
