version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  git-shallow-clone: guitarrapc/git-shallow-clone@2.8.0
  github-cli: circleci/github-cli@2.7.0

parameters:
  certora_ci_name:
    default: "CertoraProver Sanity"
    type: string
  gambit_version:
    default: "v1.0.6"
    type: string
  release_prod_version:
    default: false
    type: boolean

commands:
  proper_checkout:
    description: "Performs a shallow checkout with submodules"
    steps:
      - git-shallow-clone/checkout_advanced:
          clone_options: '--depth 1'
      - run:
          name: Sync and Update Submodules
          command: |
            git submodule sync
            git submodule update --depth 1 --init

  prepare_reg_test:
    description: "Prepares environment for regression testing"
    parameters:
      certora_cli_package:
        type: string
        default: "local"
    steps:
      - run:
          name: Install Python Dependencies
          command: |
            pip install twine setuptools==75.8.2
            pip install -r scripts/certora_cli_requirements.txt
      - run:
          name: Install Certora CLI
          command: |
            if [[ "<< parameters.certora_cli_package >>" == "local" ]]; then
              echo "Installing local Certora CLI version."
              python3 scripts/certora_cli_publish.py --local_install --pip_command pip
            else
              echo "Installing << parameters.certora_cli_package >>==$CIRCLE_TAG."
              pip install << parameters.certora_cli_package >>==$CIRCLE_TAG
            fi

  run_evm_sanity:
    description: "Runs the EVM sanity tests"
    parameters:
      set_prover_version:
        type: boolean
        default: false
    steps:
      - run:
          name: Run EVM Sanity Tests
          command: |
            cd Public/TestEVM/CVLTypechecking/ArrayLiterals
            if [[ "<< parameters.set_prover_version >>" == true ]]; then
              echo "Using `--prover_version ${PUBLIC_CIRCLE_BRANCH}`"
              certoraEVMProver Default.conf --server staging --prover_version ${PUBLIC_CIRCLE_BRANCH} --wait_for_results "all"
            else
              certoraEVMProver Default.conf --server staging --wait_for_results "all"
            fi

  run_solana_sanity:
    description: "Runs the Solana sanity tests"
    parameters:
      set_prover_version:
        type: boolean
        default: false
    steps:
      - run:
          name: Run Solana Sanity Tests
          command: |
            cd Public/TestSolana/SolanaFlowTest
            if [[ "<< parameters.set_prover_version >>" == true ]]; then
              echo "Using `--prover_version ${PUBLIC_CIRCLE_BRANCH}`"
              certoraSolanaProver Default.conf --server staging --prover_version ${PUBLIC_CIRCLE_BRANCH} --wait_for_results "all"
            else
              certoraSolanaProver Default.conf --server staging --wait_for_results "all"
            fi

  run_soroban_sanity:
    description: "Runs the Soroban sanity tests"
    parameters:
      set_prover_version:
        type: boolean
        default: false
    steps:
      - run:
          name: Run Soroban Sanity Tests
          command: |
            cd Public/TestSoroban/Meridian2024-workshop
            if [[ "<< parameters.set_prover_version >>" == true ]]; then
              echo "Using `--prover_version ${PUBLIC_CIRCLE_BRANCH}`"
              certoraSorobanProver Default.conf --server staging --prover_version ${PUBLIC_CIRCLE_BRANCH} --wait_for_results "all"
            else
              certoraSorobanProver Default.conf --server staging --wait_for_results "all"
            fi

  download_gambit:
    steps:
      - run:
          name: Get Gambit binaries
          command: |
            echo "Download gambit << pipeline.parameters.gambit_version >> released binaries"
            wget https://github.com/Certora/gambit/releases/download/<< pipeline.parameters.gambit_version >>/gambit-linux-<< pipeline.parameters.gambit_version >> -O gambit-linux
            wget https://github.com/Certora/gambit/releases/download/<< pipeline.parameters.gambit_version >>/gambit-macos-<< pipeline.parameters.gambit_version >> -O gambit-macos
            chmod +x gambit-*

  run_mutation_sanity:
    description: "Runs the mutation tests"
    parameters:
      set_prover_version:
        type: boolean
        default: false
    steps:
      - download_gambit
      - run:
          name: Rename the linux binary
          command: |
            mv gambit-linux gambit
            chmod +x gambit
            echo "export PATH=$PATH:$PWD" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Run Mutation Tests
          command: |
            cd Public/TestMutation/mulSolc8
            if [[ "<< parameters.set_prover_version >>" == true ]]; then
              echo "Using `--prover_version ${PUBLIC_CIRCLE_BRANCH}`"
              certoraMutate --conf mul8_0.conf --sync --poll_timeout 8 --debug --server staging --prover_version ${PUBLIC_CIRCLE_BRANCH}
            else
              certoraMutate --conf mul8_0.conf --sync --poll_timeout 8 --debug --server staging
            fi

  release_certora_cli:
    steps:
      - run:
          name: Get dependencies for publishing python package
          command: |
            python3 -m pip install twine wheel argcomplete setuptools==75.8.2
            python3 -m pip install -r scripts/certora_cli_requirements.txt
      - download_gambit
      - run:
          name: Run deployment script
          command: |
            mkdir publish
            cd publish
            python3 ../scripts/certora_cli_publish.py
      - run:
          name: Test the just now released version
          command: |
            cd publish
            chmod +x test.sh
            ./test.sh

jobs:
  build:
    docker:
      - image: &img public.ecr.aws/certora/cvt-image:2025.02.20-4796-8cf5eae
    working_directory: ~/repo
    environment:
      # configure sccache usage
      RUSTC_WRAPPER: "../../.cargo/bin/sccache"
      PUBLIC_CIRCLE_BRANCH: &public_circle_branch public-<< pipeline.git.branch >>
    steps:
      - proper_checkout
      - run: apt-get update && sudo apt-get install -y cmake
      - run: echo "export CERTORA=$PWD" >> $BASH_ENV
      - run: echo "export PATH=$PATH:$CERTORA" >> $BASH_ENV
      - run: echo 'export DONT_USE_VERIFICATION_RESULTS_FOR_EXITCODE="1"' >> $BASH_ENV
      - run: echo "Circle branch is ${PUBLIC_CIRCLE_BRANCH}"
      - run:
          name: run gradle - no cache
          command: ./gradlew assemble testClasses testLists -Pdetekt.full --no-build-cache | tee assembleResults.txt
      - run: cp build/libs/emv-0.4-jar-with-dependencies.jar emv.jar
      - run: cp Typechecker/build/libs/Typechecker-0.4-all.jar Typechecker.jar
      - run: cp ASTExtraction/build/libs/ASTExtraction-0.4-all.jar ASTExtraction.jar
      - run: cp scripts/Gimli-DWARF-JSONDump/target/release/Gimli-DWARF-JSONDump Gimli-DWARF-JSONDump
      - run:
          name: Collect build warnings
          command: |
            grep "^w: " assembleResults.txt | tee warnings.txt || true
      - run: mkdir bins
      - run:
          name: Copying scripts
          command: |
            cp -R scripts/Shared .
            chmod +x scripts/Shared/*.py
            cp -R scripts/CertoraProver .
            chmod +x scripts/CertoraProver/*.py
            cp -R scripts/Mutate .
            chmod +x scripts/Mutate/*.py
      - persist_to_workspace:
          root: ~/
          paths:
            - ./repo/*.jar
            - ./repo/Gimli-DWARF-JSONDump
            - ./repo/*.py
            - ./repo/scripts
            - ./repo/Shared
            - ./repo/CertoraProver
            - ./repo/Mutate
            - ./repo/gradlew
            - ./repo/gradle
            - ./repo/build.gradle.kts
            - ./repo/settings.gradle.kts
            - ./repo/gradle.properties
            - ./repo/lib/DetektRules/build/classes
            - ./repo/lib/DetektRules/src
            - ./repo/lib/DetektRules/build.gradle.kts
            - ./repo/lib/GeneralUtils/build/classes
            - ./repo/lib/GeneralUtils/src
            - ./repo/lib/GeneralUtils/build.gradle.kts
            - ./repo/lib/KspGeneration/build/classes
            - ./repo/lib/KspGeneration/src
            - ./repo/lib/KspGeneration/build.gradle.kts
            - ./repo/lib/MutationTest/build/classes
            - ./repo/lib/MutationTest/src
            - ./repo/lib/MutationTest/build.gradle.kts
            - ./repo/lib/SMTLIBUtils/build/classes
            - ./repo/lib/SMTLIBUtils/src
            - ./repo/lib/SMTLIBUtils/build.gradle.kts
            - ./repo/lib/Shared/build/classes
            - ./repo/lib/Shared/src
            - ./repo/lib/Shared/build.gradle.kts
            - ./repo/lib/TestUtils/build/classes
            - ./repo/lib/TestUtils/src
            - ./repo/src
            - ./repo/Public
            - ./repo/Typechecker/src
            - ./repo/tac_optimizer
            - ./repo/fried-egg/target/release
            - ./repo/certora_jars
            - ./repo/fried-egg/src
            - ./repo/fried-egg/build.sh
            - ./repo/fried-egg/Cargo.lock
            - ./repo/fried-egg/Cargo.toml
            - ./repo/build/generated
            - ./repo/build/classes
            - ./repo/build/testLists
            - ./repo/warnings.txt
            - ./repo/.circleci
            - ./repo/detekt
            - ./repo/ASTExtraction/src
            - .cargo

  jar_deploy:
    docker:
      - image: cimg/base:2025.02
    resource_class: small
    working_directory: ~/repo
    environment:
      PUBLIC_CIRCLE_BRANCH: *public_circle_branch
    steps:
      - attach_workspace:
          at: ~/
      - aws-cli/setup:
          role_arn: ${AWS_ROLE_ARN}
          region: ${AWS_REGION}

      - run:
          name: Deploy to S3 in ARTIFACTS and create new records
          command: |

            timestamp=`date +%s`

            if [ "$CIRCLE_TAG" != "" ]; then

              # upload to S3 and tag files
              # files related to main releases versions such as beta are excluded from s3 life-cycle policies
              aws s3api put-object --bucket prover-artifacts --key ${CIRCLE_TAG}/emv-${CIRCLE_TAG}.jar --body emv.jar --tagging 'delete=false'
              aws s3api put-object --bucket tac-optimizer-artifacts --key ${CIRCLE_TAG}/tac_optimizer-${CIRCLE_TAG} --body tac_optimizer --tagging 'delete=false'
              aws s3api put-object --bucket ast-lsp-artifacts --key ${CIRCLE_TAG}/ASTExtraction-${CIRCLE_TAG}.jar --body ASTExtraction.jar --tagging 'delete=false'
              aws s3 cp Gimli-DWARF-JSONDump s3://gimli-dumper-artifacts/Gimli-DWARF-JSONDump

              # split the version into major, minor and patch
              IFS=. read major minor patch \<<<"${CIRCLE_TAG##*-}"

              # create new DB records for emv and tac
              properties=$( jq -n \
                --arg major "${major}" \
                --arg minorpatch "$(($minor * 1000 + $patch))" \
                --arg emv "${CIRCLE_TAG}/emv-${CIRCLE_TAG}.jar" \
                --arg emvbucket "prover-artifacts" \
                --arg tac "${CIRCLE_TAG}/tac_optimizer-${CIRCLE_TAG}" \
                --arg tacbucket "tac-optimizer-artifacts" \
                --argjson stable "true" \
                --arg time "${timestamp}" \
                --arg tag "${CIRCLE_TAG}" \
                --arg commit "${CIRCLE_SHA1}" \
                '{major: {N: $major}, "minor.patch": {N: $minorpatch}, timestamp: {N: $time}, prover_object_name: {S: $emv}, prover_bucket: {S: $emvbucket}, tac_optimizer_object_name: {S: $tac}, tac_optimizer_bucket: {S: $tacbucket}, active: {BOOL: $stable}, full_version: {S: $tag}, commit_hash: {S: $commit}}' )

              echo "$properties"

              aws dynamodb put-item --table-name versions --item "$properties" --return-consumed-capacity TOTAL
            else
              # upload to S3 and tag files
              # files related to branches are included in s3 life-cycle policies
              aws s3api put-object --bucket prover-artifacts --key ${PUBLIC_CIRCLE_BRANCH}/emv-${timestamp}.jar --body emv.jar --tagging 'delete=true'
              aws s3api put-object --bucket tac-optimizer-artifacts --key ${PUBLIC_CIRCLE_BRANCH}/tac_optimizer-${timestamp} --body tac_optimizer --tagging 'delete=true'
              aws s3api put-object --bucket ast-lsp-artifacts --key ${PUBLIC_CIRCLE_BRANCH}/ASTExtraction-${timestamp}.jar --body ASTExtraction.jar --tagging 'delete=true'
              aws s3 cp Gimli-DWARF-JSONDump s3://gimli-dumper-artifacts/Gimli-DWARF-JSONDump

              # create new DB records for emv and tac
              properties=$( jq -n \
                --arg branch "${PUBLIC_CIRCLE_BRANCH}" \
                --arg time "${timestamp}" \
                --arg emv "${PUBLIC_CIRCLE_BRANCH}/emv-${timestamp}.jar" \
                --arg emvbucket "prover-artifacts" \
                --arg tac "${PUBLIC_CIRCLE_BRANCH}/tac_optimizer-${timestamp}" \
                --arg tacbucket "tac-optimizer-artifacts" \
                --arg commit "${CIRCLE_SHA1}" \
                '{branch: {S: $branch}, timestamp: {N: $time}, prover_object_name: {S: $emv}, prover_bucket: {S: $emvbucket}, tac_optimizer_object_name: {S: $tac}, tac_optimizer_bucket: {S: $tacbucket}, commit_hash: {S: $commit}}' )

              echo "$properties"

              aws dynamodb put-item --table-name develop --item "$properties" --return-consumed-capacity TOTAL
            fi

  certora_prover_sanity:
    parameters:
      certora_cli_package:
        type: string
        default: "local"
      set_prover_version:
        type: boolean
        default: false
    docker:
      - image: *img
    working_directory: ~/repo
    environment:
      RUSTC_WRAPPER: "../../.cargo/bin/sccache"
      CERTORA_CI_CLIENT: << pipeline.parameters.certora_ci_name >>
      PUBLIC_CIRCLE_BRANCH: *public_circle_branch
    steps:
      - attach_workspace:
          at: ~/
      - prepare_reg_test:
          certora_cli_package: << parameters.certora_cli_package >>
      - run_evm_sanity:
          set_prover_version: << parameters.set_prover_version >>
      - run_solana_sanity:
          set_prover_version: << parameters.set_prover_version >>
      - run_soroban_sanity:
          set_prover_version: << parameters.set_prover_version >>
      - run_mutation_sanity:
          set_prover_version: << parameters.set_prover_version >>

  # Prod release certora-cli - tag based
  release_cli:
    docker:
      - image: &python python:3.11
    resource_class: small
    working_directory: ~/repo/
    steps:
      - attach_workspace:
          at: ~/
      - release_certora_cli

  # Beta releases - tag based
  release_cli_beta:
    docker:
      - image: *python
    resource_class: small
    working_directory: ~/repo/
    steps:
      - attach_workspace:
          at: ~/
      - release_certora_cli
      - run:
          name: Create mutation container
          command: |
            curl -X POST https://circleci.com/api/v2/project/gh/Certora/mutation-test-container/pipeline \
            --header "Circle-Token: $CIRCLE_TOKEN" \
            --header "content-type: application/json" \
            --data '{"branch":"master"}'

  upload_artifact:
      parameters:
        tag_name:
          type: string
          default: ${CIRCLE_TAG}
          description: "The tag name to upload the artifact to"
      docker:
        - image: cimg/base:current
      resource_class: small
      working_directory: ~/repo/
      steps:
        - git-shallow-clone/checkout_advanced:
            clone_options: '--depth 1'
        - attach_workspace:
            at: ~/
        - github-cli/setup
        - run:
            name: Upload artifact to GitHub
            command: |
              PROVER_JAR="certora-prover-<< parameters.tag_name >>.jar"
              cp emv.jar $PROVER_JAR
              gh release upload << parameters.tag_name >> $PROVER_JAR

  # Beta mirror releases - tag based
  release_cli_beta_mirror:
    docker:
      - image: *python
    resource_class: small
    working_directory: ~/repo/
    steps:
      - attach_workspace:
          at: ~/
      - release_certora_cli

workflows:
  prover-sanity:
    jobs:
      - build:
          filters:
            tags:
              ignore: &all /.*/
            branches:
              only:
                - master
      - jar_deploy:
          context:
            - aws_artifacts
          requires:
            - build
          filters:
            tags:
              ignore: *all
            branches:
              only:
                - master
      - certora_prover_sanity:
          set_prover_version: true
          requires:
            - jar_deploy
          filters:
            tags:
              ignore: *all
            branches:
              only:
                - master

  # Release a new certora-cli-beta, beta is released only on tags.
  release-beta:
    when:
      and:
        - not: << pipeline.parameters.release_prod_version >>
    jobs:
      - build:
          filters:
            tags:
              only: &semver /^(\d|[1-9]\d)\.(\d|[1-9]\d)\.(\d|[1-9]\d)$/
            branches:
              ignore: *all
      - jar_deploy:
          context: aws_artifacts
          requires:
            - build
          filters:
            tags:
              only: *semver
            branches:
              ignore: *all
      - upload_artifact:
          context: github-token
          requires:
            - jar_deploy
          filters:
            tags:
              only: *semver
            branches:
              ignore: *all
      - release_cli_beta:
          context: opscertora
          requires:
            - jar_deploy
          filters:
            tags:
              only: *semver
            branches:
              ignore:
                - *all
      - release_cli_beta_mirror:
          context: opscertora
          requires:
            - jar_deploy
          filters:
            tags:
              only: *semver
            branches:
              ignore: *all
      - certora_prover_sanity:
          certora_cli_package: "certora-cli-beta"
          requires:
            - release_cli_beta
          filters:
            tags:
              only: *semver
            branches:
              ignore: *all

  release_prod_version_certora_cli:
    when: << pipeline.parameters.release_prod_version >>
    jobs:
      - build:
          filters:
            tags:
              only: *semver
            branches:
              ignore:
                - *all
      - release_cli:
          requires:
            - build
          filters:
            tags:
              only: *semver
            branches:
              ignore:
                - *all
      - certora_prover_sanity:
          certora_cli_package: "certora-cli"
          requires:
            - release_cli
          filters:
            tags:
              only: *semver
            branches:
              ignore:
                - *all
