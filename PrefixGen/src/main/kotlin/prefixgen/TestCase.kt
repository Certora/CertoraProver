/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package prefixgen

import prefixgen.FileUtils.deserialize
import prefixgen.data.SimpleSolidityAst
import prefixgen.data.TaggedFile.Companion.into
import prefixgen.data.TaggedPath
import datastructures.stdcollections.*
import prefixgen.fuzzer.RunData
import java.nio.file.Path
import kotlin.io.path.isRegularFile
import kotlin.io.path.listDirectoryEntries
import kotlin.io.path.nameWithoutExtension

/**
 * Represents a test case, serialized onto a filesystem.
 * Each test case *identity* is represented by the [Path] [testName]. However, this
 * path doesn't actually correspond to a single file, but a *family* of files. For example,
 * the solidity sorce for a test name is at path `$testName.sol`, and the resume data is at
 * `$testName.data.json` etc.
 *
 * A test case may have a parent which is usually *not always* found in the parent folder containing [testName].
 * For example, extensions of some test at path T usually reside in T_ext/, however parent directory != parent test
 * due to reduction, mutation, etc.
 *
 * By convention, a test case `T` owns every filename that appends a suffix onto `T`. Thus, `T` can freely create
 * `T_foo` `T_bar` without worrying about colliding. This is by convention, and no attempt is made to validate this assumption.
 */
class TestCase(
    val testName: Path,
    val parent: TestCase?
) {
    companion object {
        const val mutateExtension = ".mutate.json"
        const val resumeExtension = ".data.json"
        const val reducedExtension = ".reduced.json"
        const val runDataExt = ".run.json"

        fun fromPath(d: Path, parent: TestCase?) = d.listDirectoryEntries("*.sol").mapNotNull {
            TestCase(
                it.resolveSibling(it.nameWithoutExtension),
                parent = parent
            ).takeIf(TestCase::exists)
        }
    }

    /**
     * Get the path that holds the data for [ext].
     */
    private fun dataPath(ext: String) : Path = testName.resolveSibling("$testId$ext")

    /**
     * Directory holding reduction test cases.
     */
    val reductionDirectory: Path get() = dataPath("_lemmas")

    /**
     * Where to place mutants.
     */
    val mutantsPath get() = dataPath("_mut")
    val testId: String = testName.fileName.toString()

    /**
     * Path where the Solidity source for the test resides.
     */
    val solSourcePath get() = dataPath(".sol")

    /**
     * Path for the run data, which holds a serialization of [RunData]
     */
    @TaggedPath(RunData::class)
    val runDataPath get() = dataPath(runDataExt)

    /**
     * Path for the resume data from the sequence generation process,
     * holds a serialized [prefixgen.SequenceGenerator.ResumeData]
     */
    @TaggedPath(SequenceGenerator.ResumeData::class)
    val resumeDataPath get() = dataPath(resumeExtension)

    /**
     * Holds the [prefixgen.Mutator.RegenerationData] generated by the [Resumer],
     * and consumed by the [Mutator]. Holds
     */
    @TaggedPath(Mutator.RegenerationData::class)
    val mutateDataPath get() = dataPath(mutateExtension)

    /**
     * The data for extending a test case. This is the same as the resume data.
     */
    @TaggedPath(SequenceGenerator.Extendable::class)
    val extendDataPath get() = dataPath(resumeExtension)

    /**
     * The reduced data produced by the [Reducer]. Cannot be be used
     * for Resumption.
     */
    @TaggedPath(SequenceGenerator.Extendable::class)
    val reducedDataPath get() = dataPath(reducedExtension)

    fun exists() = solSourcePath.isRegularFile() && resumeDataPath.isRegularFile()

    val extensionsDir get() = dataPath("_ext")

    fun currentSequence() : List<String> {
        require(exists()) {
            "test $this does not exist"
        }
        return resumeDataPath.toFile().into<SequenceGenerator.ResumeData>().deserialize().let { rd ->
            rd.fixedPrefix.currCalls + rd.ast.mapNotNull {
                (it as? SimpleSolidityAst.FunctionCall)?.sighash
            }
        }
    }

    val searchDepth : Int get() = parent?.searchDepth?.plus(1) ?: 0
}
