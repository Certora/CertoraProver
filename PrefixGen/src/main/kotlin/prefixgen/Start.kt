/*
 *     The Certora Prover
 *     Copyright (C) 2025  Certora Ltd.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package prefixgen

import com.github.ajalt.clikt.core.BaseCliktCommand
import com.github.ajalt.clikt.core.main
import com.github.ajalt.clikt.parameters.arguments.argument
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.file
import com.github.ajalt.clikt.parameters.types.int
import prefixgen.FileUtils.mustDirectory
import prefixgen.data.TaggedFile.Companion.into
import prefixgen.selection.SelectorGenerator
import java.io.File

object Start {
    interface StartupMixin {
        fun BaseCliktCommand<*>.binding() = this.argument(
            help = "The JSON file describing the storage bindings created by the setup file"
        ).file(
            mustExist = true,
            canBeFile = true,
            canBeDir = false
        )

        fun BaseCliktCommand<*>.sdcFile() = this.argument(
            help = "The JSON file holding the SDCs generated by certora run describing the contract to fuzz"
        ).file(
            mustExist = true,
            canBeFile = true,
            canBeDir = false
        )

        fun BaseCliktCommand<*>.setupFile() =argument(
            help = "A text file containing the public `setUp()` function which initializes the test contracts. Setup function must end with a call to `bind()`"
        ).file(mustExist = true, canBeDir = false, canBeFile = true)
    }

    @JvmStatic
    fun main(s: Array<String>) {
        object : PrefixGenCommand("Start", "Start a fresh sequence"), StartupMixin {
            val bindingFile by binding()
            val setupFile by setupFile()
            val sdcFile by sdcFile()

            val outputDir by argument(
                help = "The directory into which the generated files are placed. Created if it does not already exist"
            ).file(
                mustExist = false,
                canBeFile = false,
                canBeDir = true
            )

            val depth by option(
                "depth",
                help = "The length of sequences to generate"
            ).int().default(3)

            override fun run() {
                val outputDir = outputDir.mustDirectory()
                for((ind, r) in start(
                    targetContract = targetContract,
                    setupFile = setupFile,
                    sdcFile = sdcFile,
                    bindingFile = bindingFile,
                    depth = depth,
                    samplingStrategy = samplingStrategy
                ).take(samples).withIndex()) {
                    val outputPath = outputDir.resolve( "harness$ind").toAbsolutePath().toString()
                    r.saveToPath(outputPath)
                }
            }
        }.main(s)
    }

    fun start(
        targetContract: String,
        setupFile: File,
        sdcFile: File,
        bindingFile: File,
        depth: Int,
        samplingStrategy: SelectorGenerator,
    ) : Sequence<SequenceGenerator.ResumableArtifact> {
        val sequenceGenerator = SequenceGenerator(
            setupCodeFile = setupFile,
            sdcDataFile = sdcFile.into(),
            initialBindingFile = bindingFile.into(),
            targetContractType = targetContract,
            maxDepth = depth,
            generator = samplingStrategy
        )
        return sequenceGenerator.entry()
    }
}
