methods {
    function solBWNot1(bytes1) external returns bytes1 envfree;
    function solBWNot2(bytes2) external returns bytes2 envfree;
    function solBWNot3(bytes3) external returns bytes3 envfree;
    function solBWNot4(bytes4) external returns bytes4 envfree;
    function solBWNot5(bytes5) external returns bytes5 envfree;
    function solBWNot6(bytes6) external returns bytes6 envfree;
    function solBWNot7(bytes7) external returns bytes7 envfree;
    function solBWNot8(bytes8) external returns bytes8 envfree;
    function solBWNot9(bytes9) external returns bytes9 envfree;
    function solBWNot10(bytes10) external returns bytes10 envfree;
    function solBWNot11(bytes11) external returns bytes11 envfree;
    function solBWNot12(bytes12) external returns bytes12 envfree;
    function solBWNot13(bytes13) external returns bytes13 envfree;
    function solBWNot14(bytes14) external returns bytes14 envfree;
    function solBWNot15(bytes15) external returns bytes15 envfree;
    function solBWNot16(bytes16) external returns bytes16 envfree;
    function solBWNot17(bytes17) external returns bytes17 envfree;
    function solBWNot18(bytes18) external returns bytes18 envfree;
    function solBWNot19(bytes19) external returns bytes19 envfree;
    function solBWNot20(bytes20) external returns bytes20 envfree;
    function solBWNot21(bytes21) external returns bytes21 envfree;
    function solBWNot22(bytes22) external returns bytes22 envfree;
    function solBWNot23(bytes23) external returns bytes23 envfree;
    function solBWNot24(bytes24) external returns bytes24 envfree;
    function solBWNot25(bytes25) external returns bytes25 envfree;
    function solBWNot26(bytes26) external returns bytes26 envfree;
    function solBWNot27(bytes27) external returns bytes27 envfree;
    function solBWNot28(bytes28) external returns bytes28 envfree;
    function solBWNot29(bytes29) external returns bytes29 envfree;
    function solBWNot30(bytes30) external returns bytes30 envfree;
    function solBWNot31(bytes31) external returns bytes31 envfree;
    function solBWNot32(bytes32) external returns bytes32 envfree;

    /**
    for x in range(0,32):
        print(f"function solBWNot{x+1}UInt(uint{8*(x+1)}) external returns (uint{8*(x+1)}) envfree;")
    */
    function solBWNot1UInt(uint8) external returns (uint8) envfree;
    function solBWNot2UInt(uint16) external returns (uint16) envfree;
    function solBWNot3UInt(uint24) external returns (uint24) envfree;
    function solBWNot4UInt(uint32) external returns (uint32) envfree;
    function solBWNot5UInt(uint40) external returns (uint40) envfree;
    function solBWNot6UInt(uint48) external returns (uint48) envfree;
    function solBWNot7UInt(uint56) external returns (uint56) envfree;
    function solBWNot8UInt(uint64) external returns (uint64) envfree;
    function solBWNot9UInt(uint72) external returns (uint72) envfree;
    function solBWNot10UInt(uint80) external returns (uint80) envfree;
    function solBWNot11UInt(uint88) external returns (uint88) envfree;
    function solBWNot12UInt(uint96) external returns (uint96) envfree;
    function solBWNot13UInt(uint104) external returns (uint104) envfree;
    function solBWNot14UInt(uint112) external returns (uint112) envfree;
    function solBWNot15UInt(uint120) external returns (uint120) envfree;
    function solBWNot16UInt(uint128) external returns (uint128) envfree;
    function solBWNot17UInt(uint136) external returns (uint136) envfree;
    function solBWNot18UInt(uint144) external returns (uint144) envfree;
    function solBWNot19UInt(uint152) external returns (uint152) envfree;
    function solBWNot20UInt(uint160) external returns (uint160) envfree;
    function solBWNot21UInt(uint168) external returns (uint168) envfree;
    function solBWNot22UInt(uint176) external returns (uint176) envfree;
    function solBWNot23UInt(uint184) external returns (uint184) envfree;
    function solBWNot24UInt(uint192) external returns (uint192) envfree;
    function solBWNot25UInt(uint200) external returns (uint200) envfree;
    function solBWNot26UInt(uint208) external returns (uint208) envfree;
    function solBWNot27UInt(uint216) external returns (uint216) envfree;
    function solBWNot28UInt(uint224) external returns (uint224) envfree;
    function solBWNot29UInt(uint232) external returns (uint232) envfree;
    function solBWNot30UInt(uint240) external returns (uint240) envfree;
    function solBWNot31UInt(uint248) external returns (uint248) envfree;
    function solBWNot32UInt(uint256) external returns (uint256) envfree;

    /**
    for x in range(0,32):
        print(f"function solBWNot{x+1}Int(int{8*(x+1)}) external returns (int{8*(x+1)}) envfree;")
    */
    function solBWNot1Int(int8) external returns (int8) envfree;
    function solBWNot2Int(int16) external returns (int16) envfree;
    function solBWNot3Int(int24) external returns (int24) envfree;
    function solBWNot4Int(int32) external returns (int32) envfree;
    function solBWNot5Int(int40) external returns (int40) envfree;
    function solBWNot6Int(int48) external returns (int48) envfree;
    function solBWNot7Int(int56) external returns (int56) envfree;
    function solBWNot8Int(int64) external returns (int64) envfree;
    function solBWNot9Int(int72) external returns (int72) envfree;
    function solBWNot10Int(int80) external returns (int80) envfree;
    function solBWNot11Int(int88) external returns (int88) envfree;
    function solBWNot12Int(int96) external returns (int96) envfree;
    function solBWNot13Int(int104) external returns (int104) envfree;
    function solBWNot14Int(int112) external returns (int112) envfree;
    function solBWNot15Int(int120) external returns (int120) envfree;
    function solBWNot16Int(int128) external returns (int128) envfree;
    function solBWNot17Int(int136) external returns (int136) envfree;
    function solBWNot18Int(int144) external returns (int144) envfree;
    function solBWNot19Int(int152) external returns (int152) envfree;
    function solBWNot20Int(int160) external returns (int160) envfree;
    function solBWNot21Int(int168) external returns (int168) envfree;
    function solBWNot22Int(int176) external returns (int176) envfree;
    function solBWNot23Int(int184) external returns (int184) envfree;
    function solBWNot24Int(int192) external returns (int192) envfree;
    function solBWNot25Int(int200) external returns (int200) envfree;
    function solBWNot26Int(int208) external returns (int208) envfree;
    function solBWNot27Int(int216) external returns (int216) envfree;
    function solBWNot28Int(int224) external returns (int224) envfree;
    function solBWNot29Int(int232) external returns (int232) envfree;
    function solBWNot30Int(int240) external returns (int240) envfree;
    function solBWNot31Int(int248) external returns (int248) envfree;
    function solBWNot32Int(int256) external returns (int256) envfree;
}

rule checkWrong1() {
    // ~0b10001100 (0x8c) != 0b1110100 (0x74)
    assert ~0x8c == 0x74;
}
rule checkWrong2() {
    // ~0b10001100 (0x8c) != 0b1110100 (0x74)
    assert solBWNot1UInt(0x8c) == 0x74;
}

rule checkEval() {
    /*
    for x in range(0,32):
        n = random.randrange(2**(8*x),2**(8*(x+1)))
        flip = (2**(8*(x+1))-1) ^ n
        print(f"assert ~{hex(n)} == {hex(flip)}; // ~{bin(n)} == {bin(flip)}")
    */
    assert ~0x8c == 0x73; // ~0b10001100 == 0b1110011
    assert ~0xcc4e == 0x33b1; // ~0b1100110001001110 == 0b11001110110001
    assert ~0xcecfaa == 0x313055; // ~0b110011101100111110101010 == 0b1100010011000001010101
    assert ~0x204b27c4 == 0xdfb4d83b; // ~0b100000010010110010011111000100 == 0b11011111101101001101100000111011
    assert ~0xd664fec1a1 == 0x299b013e5e; // ~0b1101011001100100111111101100000110100001 == 0b10100110011011000000010011111001011110
    assert ~0xb01e9df1206b == 0x4fe1620edf94; // ~0b101100000001111010011101111100010010000001101011 == 0b10011111110000101100010000011101101111110010100
    assert ~0xa67395991e5d26 == 0x598c6a66e1a2d9; // ~0b10100110011100111001010110011001000111100101110100100110 == 0b1011001100011000110101001100110111000011010001011011001
    assert ~0xeb9c9d43bbf47738 == 0x146362bc440b88c7; // ~0b1110101110011100100111010100001110111011111101000111011100111000 == 0b1010001100011011000101011110001000100000010111000100011000111
    assert ~0x3f8e7f27ec1c7cb325 == 0xc07180d813e3834cda; // ~0b1111111000111001111111001001111110110000011100011111001011001100100101 == 0b110000000111000110000000110110000001001111100011100000110100110011011010
    assert ~0xf5872b937285de6ea294 == 0xa78d46c8d7a21915d6b; // ~0b11110101100001110010101110010011011100101000010111011110011011101010001010010100 == 0b1010011110001101010001101100100011010111101000100001100100010101110101101011
    assert ~0x7ce1338654047d2dd53c91 == 0x831ecc79abfb82d22ac36e; // ~0b111110011100001001100111000011001010100000001000111110100101101110101010011110010010001 == 0b1000001100011110110011000111100110101011111110111000001011010010001010101100001101101110
    assert ~0x19cd11ec974b94c8abc866a7 == 0xe632ee1368b46b3754379958; // ~0b110011100110100010001111011001001011101001011100101001100100010101011110010000110011010100111 == 0b111001100011001011101110000100110110100010110100011010110011011101010100001101111001100101011000
    assert ~0x7e5d9986ad817fee1b39203df2 == 0x81a26679527e8011e4c6dfc20d; // ~0b1111110010111011001100110000110101011011000000101111111111011100001101100111001001000000011110111110010 == 0b10000001101000100110011001111001010100100111111010000000000100011110010011000110110111111100001000001101
    assert ~0x89b4d1884196aea5faf4d69ff386 == 0x764b2e77be69515a050b29600c79; // ~0b1000100110110100110100011000100001000001100101101010111010100101111110101111010011010110100111111111001110000110 == 0b111011001001011001011100111011110111110011010010101000101011010000001010000101100101001011000000000110001111001
    assert ~0xd5410dbdc41e4179d4a6d796ff3c9d == 0x2abef2423be1be862b59286900c362; // ~0b110101010100000100001101101111011100010000011110010000010111100111010100101001101101011110010110111111110011110010011101 == 0b1010101011111011110010010000100011101111100001101111101000011000101011010110010010100001101001000000001100001101100010
    assert ~0x63f7689cb274e87619c62e7a4c445b2 == 0xf9c0897634d8b1789e639d185b3bba4d; // ~0b110001111110111011010001001110010110010011101001110100001110110000110011100011000101110011110100100110001000100010110110010 == 0b11111001110000001000100101110110001101001101100010110001011110001001111001100011100111010001100001011011001110111011101001001101
    assert ~0xc5d478b90447bbd2693d3ab0268a94d150 == 0x3a2b8746fbb8442d96c2c54fd9756b2eaf; // ~0b1100010111010100011110001011100100000100010001111011101111010010011010010011110100111010101100000010011010001010100101001101000101010000 == 0b11101000101011100001110100011011111011101110000100010000101101100101101100001011000101010011111101100101110101011010110010111010101111
    assert ~0x3bc29c1caf5b2012318558b95dde6d8940ec == 0xc43d63e350a4dfedce7aa746a2219276bf13; // ~0b1110111100001010011100000111001010111101011011001000000001001000110001100001010101100010111001010111011101111001101101100010010100000011101100 == 0b110001000011110101100011111000110101000010100100110111111110110111001110011110101010011101000110101000100010000110010010011101101011111100010011
    assert ~0x1c37d6295a6c83a93bcf5ee7fcedbbae076b53 == 0xe3c829d6a5937c56c430a11803124451f894ac; // ~0b11100001101111101011000101001010110100110110010000011101010010011101111001111010111101110011111111100111011011011101110101110000001110110101101010011 == 0b11100011110010000010100111010110101001011001001101111100010101101100010000110000101000010001100000000011000100100100010001010001111110001001010010101100
    assert ~0xbfc78cfab1dc4af965ad9987482cd994607377fd == 0x403873054e23b5069a526678b7d3266b9f8c8802; // ~0b1011111111000111100011001111101010110001110111000100101011111001011001011010110110011001100001110100100000101100110110011001010001100000011100110111011111111101 == 0b100000000111000011100110000010101001110001000111011010100000110100110100101001001100110011110001011011111010011001001100110101110011111100011001000100000000010
    assert ~0x648cc5318b5fc330c2f06f2950fce1760d0acc1663 == 0x9b733ace74a03ccf3d0f90d6af031e89f2f533e99c; // ~0b11001001000110011000101001100011000101101011111110000110011000011000010111100000110111100101001010100001111110011100001011101100000110100001010110011000001011001100011 == 0b100110110111001100111010110011100111010010100000001111001100111100111101000011111001000011010110101011110000001100011110100010011111001011110101001100111110100110011100
    assert ~0x60bd0d6c013bc6adc18280abc1f2e22d5bf2c7864395 == 0x9f42f293fec439523e7d7f543e0d1dd2a40d3879bc6a; // ~0b1100000101111010000110101101100000000010011101111000110101011011100000110000010100000001010101111000001111100101110001000101101010110111111001011000111100001100100001110010101 == 0b10011111010000101111001010010011111111101100010000111001010100100011111001111101011111110101010000111110000011010001110111010010101001000000110100111000011110011011110001101010
    assert ~0x14ed6439ac0f483ecdf26541e47b2538e0198749c96f0c == 0xeb129bc653f0b7c1320d9abe1b84dac71fe678b63690f3; // ~0b1010011101101011001000011100110101100000011110100100000111110110011011111001001100101010000011110010001111011001001010011100011100000000110011000011101001001110010010110111100001100 == 0b1110101100010010100110111100011001010011111100001011011111000001001100100000110110011010101111100001101110000100110110101100011100011111111001100111100010110110001101101001000011110011
    assert ~0xebd803d2ce786efe3eded9da77704de49b791d74853fdfcb == 0x1427fc2d31879101c1212625888fb21b6486e28b7ac02034; // ~0b111010111101100000000011110100101100111001111000011011101111111000111110110111101101100111011010011101110111000001001101111001001001101101111001000111010111010010000101001111111101111111001011 == 0b101000010011111111100001011010011000110000111100100010000000111000001001000010010011000100101100010001000111110110010000110110110010010000110111000101000101101111010110000000010000000110100
    assert ~0x1dda34c63ea2e05f379638a00319d618db1295aa750213ec40 == 0xe225cb39c15d1fa0c869c75ffce629e724ed6a558afdec13bf; // ~0b11101110110100011010011000110001111101010001011100000010111110011011110010110001110001010000000000011000110011101011000011000110110110001001010010101101010100111010100000010000100111110110001000000 == 0b11100010001001011100101100111001110000010101110100011111101000001100100001101001110001110101111111111100111001100010100111100111001001001110110101101010010101011000101011111101111011000001001110111111
    assert ~0xb92f317b500aa1c6f5ece020d037283d885c86fc103fb3f14896 == 0x46d0ce84aff55e390a131fdf2fc8d7c277a37903efc04c0eb769; // ~0b1011100100101111001100010111101101010000000010101010000111000110111101011110110011100000001000001101000000110111001010000011110110001000010111001000011011111100000100000011111110110011111100010100100010010110 == 0b100011011010000110011101000010010101111111101010101111000111001000010100001001100011111110111110010111111001000110101111100001001110111101000110111100100000011111011111100000001001100000011101011011101101001
    assert ~0x71f51b771ec7f2b6b2d8ebb0035a4e5cf22531cda88dc3063d250e == 0x8e0ae488e1380d494d27144ffca5b1a30ddace3257723cf9c2daf1; // ~0b11100011111010100011011011101110001111011000111111100101011011010110010110110001110101110110000000000110101101001001110010111001111001000100101001100011100110110101000100011011100001100000110001111010010010100001110 == 0b100011100000101011100100100010001110000100111000000011010100100101001101001001110001010001001111111111001010010110110001101000110000110111011010110011100011001001010111011100100011110011111001110000101101101011110001
    assert ~0x43d5ec96500cf41387c5bd0709c28f62f9931752b641926534d75963 == 0xbc2a1369aff30bec783a42f8f63d709d066ce8ad49be6d9acb28a69c; // ~0b1000011110101011110110010010110010100000000110011110100000100111000011111000101101111010000011100001001110000101000111101100010111110011001001100010111010100101011011001000001100100100110010100110100110101110101100101100011 == 0b10111100001010100001001101101001101011111111001100001011111011000111100000111010010000101111100011110110001111010111000010011101000001100110110011101000101011010100100110111110011011011001101011001011001010001010011010011100
    assert ~0xe4bf76de2fd21f9aa79e3e3ae3229006fecd71c7c31e67a1441797ff79 == 0x1b408921d02de0655861c1c51cdd6ff901328e383ce1985ebbe8680086; // ~0b1110010010111111011101101101111000101111110100100001111110011010101001111001111000111110001110101110001100100010100100000000011011111110110011010111000111000111110000110001111001100111101000010100010000010111100101111111111101111001 == 0b1101101000000100010010010000111010000001011011110000001100101010110000110000111000001110001010001110011011101011011111111100100000001001100101000111000111000001111001110000110011000010111101011101111101000011010000000000010000110
    assert ~0x167805a439a82157eabf5d53b33bbcb6a4c833913025c47b5fe3539c504a == 0xe987fa5bc657dea81540a2ac4cc443495b37cc6ecfda3b84a01cac63afb5; // ~0b101100111100000000101101001000011100110101000001000010101011111101010101111110101110101010011101100110011101110111100101101101010010011001000001100111001000100110000001001011100010001111011010111111110001101010011100111000101000001001010 == 0b111010011000011111111010010110111100011001010111110111101010100000010101010000001010001010101100010011001100010001000011010010010101101100110111110011000110111011001111110110100011101110000100101000000001110010101100011000111010111110110101
    assert ~0x14678001dd1c913609cccb2de1d62762439e358e52294d9256d6156f34a087 == 0xeb987ffe22e36ec9f63334d21e29d89dbc61ca71add6b26da929ea90cb5f78; // ~0b10100011001111000000000000001110111010001110010010001001101100000100111001100110010110010110111100001110101100010011101100010010000111001111000110101100011100101001000101001010011011001001001010110110101100001010101101111001101001010000010000111 == 0b11101011100110000111111111111110001000101110001101101110110010011111011000110011001101001101001000011110001010011101100010011101101111000110000111001010011100011010110111010110101100100110110110101001001010011110101010010000110010110101111101111000
    assert ~0xc0423878edc8c818ede0f4c33f7e57ca1e92fb7d7db755a6a23b85076a6cfdd8 == 0x3fbdc787123737e7121f0b3cc081a835e16d04828248aa595dc47af895930227; // ~0b1100000001000010001110000111100011101101110010001100100000011000111011011110000011110100110000110011111101111110010101111100101000011110100100101111101101111101011111011011011101010101101001101010001000111011100001010000011101101010011011001111110111011000 == 0b11111110111101110001111000011100010010001101110011011111100111000100100001111100001011001111001100000010000001101010000011010111100001011011010000010010000010100000100100100010101010010110010101110111000100011110101111100010010101100100110000001000100111
}

rule checkBWNotHexSigned() {
    // on signed integers, a bwnot will flip the sign.
    // so if we bwnot on a positive and want to get a signed integer, we need to flip the sign by deducting max_uintK+1.
    // pos and neg range
    /*
    for x in range(0,32):
        n = random.randrange(-2**(8*(x+1)-1)+1,2**(8*(x+1)-1))
        if n < 0:
            print(f"assert assert_int{8*(x+1)}(~({hex(n)})) == solBWNot{x+1}Int({hex(n)});")
        else:
            print(f"assert assert_int{8*(x+1)}(~{hex(n)}-{2**(8*(x+1))}) == solBWNot{x+1}Int({hex(n)});")
    */
    assert assert_int8(~0x2b-256) == solBWNot1Int(0x2b);
    assert assert_int16(~(-0x49da)) == solBWNot2Int(-0x49da);
    assert assert_int24(~(-0x20c745)) == solBWNot3Int(-0x20c745);
    assert assert_int32(~0x1580c09b-4294967296) == solBWNot4Int(0x1580c09b);
    assert assert_int40(~(-0x724969a6ff)) == solBWNot5Int(-0x724969a6ff);
    assert assert_int48(~(-0x7dbef9ac9d44)) == solBWNot6Int(-0x7dbef9ac9d44);
    assert assert_int56(~0xc55b8db09cfa0-72057594037927936) == solBWNot7Int(0xc55b8db09cfa0);
    assert assert_int64(~0x5b22c54912907f84-18446744073709551616) == solBWNot8Int(0x5b22c54912907f84);
    assert assert_int72(~(-0x109d8435e5da9c2a5b)) == solBWNot9Int(-0x109d8435e5da9c2a5b);
    assert assert_int80(~(-0x6efb922f05a0cc8a4bfa)) == solBWNot10Int(-0x6efb922f05a0cc8a4bfa);
    assert assert_int88(~0x74215e86918a218d653a21-309485009821345068724781056) == solBWNot11Int(0x74215e86918a218d653a21);
    assert assert_int96(~(-0x5f10dc181d7a974b6e1339d3)) == solBWNot12Int(-0x5f10dc181d7a974b6e1339d3);
    assert assert_int104(~(-0x51ca27386eede1292beca2fd0f)) == solBWNot13Int(-0x51ca27386eede1292beca2fd0f);
    assert assert_int112(~0x192680c81ccf69ab40b2c25a3fe4-5192296858534827628530496329220096) == solBWNot14Int(0x192680c81ccf69ab40b2c25a3fe4);
    assert assert_int120(~(-0x464ecaf5b00e6870d886f9dad89d03)) == solBWNot15Int(-0x464ecaf5b00e6870d886f9dad89d03);
    assert assert_int128(~(-0x1371bb30a8fc781162abfa3ad2d8d958)) == solBWNot16Int(-0x1371bb30a8fc781162abfa3ad2d8d958);
    assert assert_int136(~(-0x50c6495830d16b8c728b37c49dbf33ef51)) == solBWNot17Int(-0x50c6495830d16b8c728b37c49dbf33ef51);
    assert assert_int144(~(-0x2b2eeec7775e99394e9c2e7a75bbe8bb095e)) == solBWNot18Int(-0x2b2eeec7775e99394e9c2e7a75bbe8bb095e);
    assert assert_int152(~0x1a2a9a26d629e4992071353e43b944e8eaf364-5708990770823839524233143877797980545530986496) == solBWNot19Int(0x1a2a9a26d629e4992071353e43b944e8eaf364);
    assert assert_int160(~0x6b50038afc4e0ba8082db50f4db5be387ea206ce-1461501637330902918203684832716283019655932542976) == solBWNot20Int(0x6b50038afc4e0ba8082db50f4db5be387ea206ce);
    assert assert_int168(~0x534aa592a0ce83e849668c5ce85552eab8a1baba67-374144419156711147060143317175368453031918731001856) == solBWNot21Int(0x534aa592a0ce83e849668c5ce85552eab8a1baba67);
    assert assert_int176(~(-0x5185164e3afc25dacfe3dba8e78f6d8a89ef735dd074)) == solBWNot22Int(-0x5185164e3afc25dacfe3dba8e78f6d8a89ef735dd074);
    assert assert_int184(~0x61040fc57aa00758e2a59671df1b07608323af7b1757a8-24519928653854221733733552434404946937899825954937634816) == solBWNot23Int(0x61040fc57aa00758e2a59671df1b07608323af7b1757a8);
    assert assert_int192(~0x6faec40ca6812ece53ca030a041cc77849f03b1e6c2eaffb-6277101735386680763835789423207666416102355444464034512896) == solBWNot24Int(0x6faec40ca6812ece53ca030a041cc77849f03b1e6c2eaffb);
    assert assert_int200(~0x30989d918e4f8402316421d0927033b8c564fe1b75285a856e-1606938044258990275541962092341162602522202993782792835301376) == solBWNot25Int(0x30989d918e4f8402316421d0927033b8c564fe1b75285a856e);
    assert assert_int208(~(-0x119b25a07a2a4f541201303626a20512bec129457c9d8364eefa)) == solBWNot26Int(-0x119b25a07a2a4f541201303626a20512bec129457c9d8364eefa);
    assert assert_int216(~0x4b077333c3929d8b5af165545851834151f8e6b9d3e1f418ab2804-105312291668557186697918027683670432318895095400549111254310977536) == solBWNot27Int(0x4b077333c3929d8b5af165545851834151f8e6b9d3e1f418ab2804);
    assert assert_int224(~0x1b86d2777e2d40104a5dca6bb4f1a83ba478a23b5f5e7a20c90a7d9a-26959946667150639794667015087019630673637144422540572481103610249216) == solBWNot28Int(0x1b86d2777e2d40104a5dca6bb4f1a83ba478a23b5f5e7a20c90a7d9a);
    assert assert_int232(~(-0x6c292f068b68f33828279e3c5cd6ae950e352293651588f09b46a56588)) == solBWNot29Int(-0x6c292f068b68f33828279e3c5cd6ae950e352293651588f09b46a56588);
    assert assert_int240(~0x7b985c458ae74ddd8961d0bfc20a35e0352d1955f3313298f14f0cd05d50-1766847064778384329583297500742918515827483896875618958121606201292619776) == solBWNot30Int(0x7b985c458ae74ddd8961d0bfc20a35e0352d1955f3313298f14f0cd05d50);
    assert assert_int248(~0x399aac41e62cd0f5925dc4549d9481fd21c2a8080fe3da64238a5bb31ae8ce-452312848583266388373324160190187140051835877600158453279131187530910662656) == solBWNot31Int(0x399aac41e62cd0f5925dc4549d9481fd21c2a8080fe3da64238a5bb31ae8ce);
    assert assert_int256(~0x4fb78f04a1db41f0d4826b4a3a61e062d7eb687df1ff2d789c8656c5835ea90e-115792089237316195423570985008687907853269984665640564039457584007913129639936) == solBWNot32Int(0x4fb78f04a1db41f0d4826b4a3a61e062d7eb687df1ff2d789c8656c5835ea90e);

    // positives only
    /*
    for x in range(0,32):
        n = random.randrange(0,2**(8*(x+1)-1))
        print(f"assert assert_int{8*(x+1)}(~{hex(n)}-{2**(8*(x+1))}) == solBWNot{x+1}Int({hex(n)});")
    */
    assert assert_int8(~0x47-256) == solBWNot1Int(0x47);
    assert assert_int16(~0x7b25-65536) == solBWNot2Int(0x7b25);
    assert assert_int24(~0x7c72b7-16777216) == solBWNot3Int(0x7c72b7);
    assert assert_int32(~0x257a6e83-4294967296) == solBWNot4Int(0x257a6e83);
    assert assert_int40(~0x1b32cef6ab-1099511627776) == solBWNot5Int(0x1b32cef6ab);
    assert assert_int48(~0x62c632aaba27-281474976710656) == solBWNot6Int(0x62c632aaba27);
    assert assert_int56(~0x59031891ed482d-72057594037927936) == solBWNot7Int(0x59031891ed482d);
    assert assert_int64(~0x3635378ccca313df-18446744073709551616) == solBWNot8Int(0x3635378ccca313df);
    assert assert_int72(~0x26fd1ec9686dc92280-4722366482869645213696) == solBWNot9Int(0x26fd1ec9686dc92280);
    assert assert_int80(~0x45496a308654a4cfc7c3-1208925819614629174706176) == solBWNot10Int(0x45496a308654a4cfc7c3);
    assert assert_int88(~0x4af983e55bf33bacd035f5-309485009821345068724781056) == solBWNot11Int(0x4af983e55bf33bacd035f5);
    assert assert_int96(~0x529dbaa3f0ab74551a040bfa-79228162514264337593543950336) == solBWNot12Int(0x529dbaa3f0ab74551a040bfa);
    assert assert_int104(~0x14a3aaa4fa27959c1625a6b384-20282409603651670423947251286016) == solBWNot13Int(0x14a3aaa4fa27959c1625a6b384);
    assert assert_int112(~0x2dcbe527e8c04284c38187d59a23-5192296858534827628530496329220096) == solBWNot14Int(0x2dcbe527e8c04284c38187d59a23);
    assert assert_int120(~0x409efd8b573866dcf076c5dc67f7c1-1329227995784915872903807060280344576) == solBWNot15Int(0x409efd8b573866dcf076c5dc67f7c1);
    assert assert_int128(~0x1caf99f585652ee94d0116fa8e5a6163-340282366920938463463374607431768211456) == solBWNot16Int(0x1caf99f585652ee94d0116fa8e5a6163);
    assert assert_int136(~0x52685b9c59c48a32789ff7008fce786fa8-87112285931760246646623899502532662132736) == solBWNot17Int(0x52685b9c59c48a32789ff7008fce786fa8);
    assert assert_int144(~0x3365f207252dfa6a225403d6f0d8d2f91f81-22300745198530623141535718272648361505980416) == solBWNot18Int(0x3365f207252dfa6a225403d6f0d8d2f91f81);
    assert assert_int152(~0x130e05177d2d1d2ec9f219e4d40e7c39afc68e-5708990770823839524233143877797980545530986496) == solBWNot19Int(0x130e05177d2d1d2ec9f219e4d40e7c39afc68e);
    assert assert_int160(~0x772dae820f29a2881087ec05297c483c6f793c48-1461501637330902918203684832716283019655932542976) == solBWNot20Int(0x772dae820f29a2881087ec05297c483c6f793c48);
    assert assert_int168(~0x77e737dded88f045233458135a244d5a029ed56980-374144419156711147060143317175368453031918731001856) == solBWNot21Int(0x77e737dded88f045233458135a244d5a029ed56980);
    assert assert_int176(~0x57fac7abd4b30d327f3567229e677ef5f40b0090d143-95780971304118053647396689196894323976171195136475136) == solBWNot22Int(0x57fac7abd4b30d327f3567229e677ef5f40b0090d143);
    assert assert_int184(~0x5ad7aa3048513bec0e0b8c603757fbf8ca21a41b0786c3-24519928653854221733733552434404946937899825954937634816) == solBWNot23Int(0x5ad7aa3048513bec0e0b8c603757fbf8ca21a41b0786c3);
    assert assert_int192(~0x3ece2c4400c3d50ae080c172a9328eea964c367c64e53f8b-6277101735386680763835789423207666416102355444464034512896) == solBWNot24Int(0x3ece2c4400c3d50ae080c172a9328eea964c367c64e53f8b);
    assert assert_int200(~0x17796b956823c3de463d656a64f2abd978acb5a71d03ae1170-1606938044258990275541962092341162602522202993782792835301376) == solBWNot25Int(0x17796b956823c3de463d656a64f2abd978acb5a71d03ae1170);
    assert assert_int208(~0x7b5b02f3b2918d6f7a1b233dd1569ad1e1ac42f42ca004bd1637-411376139330301510538742295639337626245683966408394965837152256) == solBWNot26Int(0x7b5b02f3b2918d6f7a1b233dd1569ad1e1ac42f42ca004bd1637);
    assert assert_int216(~0x6fa40abac5867395af6c0d7228f99a6928f1f6683f2408ca737269-105312291668557186697918027683670432318895095400549111254310977536) == solBWNot27Int(0x6fa40abac5867395af6c0d7228f99a6928f1f6683f2408ca737269);
    assert assert_int224(~0x66381b9f79be044d57c87d778c31bb9a23c0d1bc947840d94cb1deea-26959946667150639794667015087019630673637144422540572481103610249216) == solBWNot28Int(0x66381b9f79be044d57c87d778c31bb9a23c0d1bc947840d94cb1deea);
    assert assert_int232(~0x5de40a04205a23a40ff86c0403d3ef85c0873b28dcf37bfa35b122e55-6901746346790563787434755862277025452451108972170386555162524223799296) == solBWNot29Int(0x5de40a04205a23a40ff86c0403d3ef85c0873b28dcf37bfa35b122e55);
    assert assert_int240(~0x1064ed8718f2201eda26d066c429232ccf3ce0caad4e13c5a825d10699ba-1766847064778384329583297500742918515827483896875618958121606201292619776) == solBWNot30Int(0x1064ed8718f2201eda26d066c429232ccf3ce0caad4e13c5a825d10699ba);
    assert assert_int248(~0x652376505f43a4ad061ebe40bd0f3e96459efd114c6e953c3c685a0b606bf7-452312848583266388373324160190187140051835877600158453279131187530910662656) == solBWNot31Int(0x652376505f43a4ad061ebe40bd0f3e96459efd114c6e953c3c685a0b606bf7);
    assert assert_int256(~0x3d010f2f05c583956a9e994a72fbc0ff3fcfbd6e3a0b1a393bd366700892e04e-115792089237316195423570985008687907853269984665640564039457584007913129639936) == solBWNot32Int(0x3d010f2f05c583956a9e994a72fbc0ff3fcfbd6e3a0b1a393bd366700892e04e);

    // negatives only
    /*
    for x in range(0,32):
        n = random.randrange(-2**(8*(x+1)-1)+1,0)
        print(f"assert assert_int{8*(x+1)}(~({hex(n)})) == solBWNot{x+1}Int({hex(n)});")
    */
    assert assert_int8(~(-0x1f)) == solBWNot1Int(-0x1f);
    assert assert_int16(~(-0x5122)) == solBWNot2Int(-0x5122);
    assert assert_int24(~(-0x428873)) == solBWNot3Int(-0x428873);
    assert assert_int32(~(-0x20d7a154)) == solBWNot4Int(-0x20d7a154);
    assert assert_int40(~(-0x453bb54a44)) == solBWNot5Int(-0x453bb54a44);
    assert assert_int48(~(-0x29391ec1d7c8)) == solBWNot6Int(-0x29391ec1d7c8);
    assert assert_int56(~(-0x360bbecb2075bf)) == solBWNot7Int(-0x360bbecb2075bf);
    assert assert_int64(~(-0x6f829116b32bee89)) == solBWNot8Int(-0x6f829116b32bee89);
    assert assert_int72(~(-0x643796424fc58e12f3)) == solBWNot9Int(-0x643796424fc58e12f3);
    assert assert_int80(~(-0x6f85517bd12ed699f0e5)) == solBWNot10Int(-0x6f85517bd12ed699f0e5);
    assert assert_int88(~(-0x5ec425ab7e40bf65e2553a)) == solBWNot11Int(-0x5ec425ab7e40bf65e2553a);
    assert assert_int96(~(-0x373660eefafd8c42f515f600)) == solBWNot12Int(-0x373660eefafd8c42f515f600);
    assert assert_int104(~(-0x1071931fd25ce373a046162616)) == solBWNot13Int(-0x1071931fd25ce373a046162616);
    assert assert_int112(~(-0x1bfed05b3884102fb03f9143f531)) == solBWNot14Int(-0x1bfed05b3884102fb03f9143f531);
    assert assert_int120(~(-0x6f6edc959b3984c1195cd6cc66c74b)) == solBWNot15Int(-0x6f6edc959b3984c1195cd6cc66c74b);
    assert assert_int128(~(-0x7655a5307b88ce1b5d68c486d511c9a)) == solBWNot16Int(-0x7655a5307b88ce1b5d68c486d511c9a);
    assert assert_int136(~(-0x10f58bc10fc80175fe01b567bbf73187cf)) == solBWNot17Int(-0x10f58bc10fc80175fe01b567bbf73187cf);
    assert assert_int144(~(-0x23d3813b3280ddd87890893b7fa4873118de)) == solBWNot18Int(-0x23d3813b3280ddd87890893b7fa4873118de);
    assert assert_int152(~(-0xb38cbb1cabd9e0379a6b8eb4672933b0e361f)) == solBWNot19Int(-0xb38cbb1cabd9e0379a6b8eb4672933b0e361f);
    assert assert_int160(~(-0x6074a33dc0d246bd302d361639cdf951034c892a)) == solBWNot20Int(-0x6074a33dc0d246bd302d361639cdf951034c892a);
    assert assert_int168(~(-0x7cbd9c228c52483ff64469e6e494c14a13eb63a893)) == solBWNot21Int(-0x7cbd9c228c52483ff64469e6e494c14a13eb63a893);
    assert assert_int176(~(-0x15b46ce8e67468d1ab967fe58e845a5468987b00e26b)) == solBWNot22Int(-0x15b46ce8e67468d1ab967fe58e845a5468987b00e26b);
    assert assert_int184(~(-0x27b0c14aec0fae32d4311afed165072560506d32330bce)) == solBWNot23Int(-0x27b0c14aec0fae32d4311afed165072560506d32330bce);
    assert assert_int192(~(-0x5f0b0de56ac7a8f38245e3a801f9d1a307d0aee1263dc9ca)) == solBWNot24Int(-0x5f0b0de56ac7a8f38245e3a801f9d1a307d0aee1263dc9ca);
    assert assert_int200(~(-0x5bd177593cffee9747a8b5b698c5098e59d49e7bb4507e0c7b)) == solBWNot25Int(-0x5bd177593cffee9747a8b5b698c5098e59d49e7bb4507e0c7b);
    assert assert_int208(~(-0x1398e2846556256957fa93fbddf185deda7d828b3c3127666bcd)) == solBWNot26Int(-0x1398e2846556256957fa93fbddf185deda7d828b3c3127666bcd);
    assert assert_int216(~(-0x5f23092812176ae90396c8d9e9c5c08042fdd74fd72ca1b1679418)) == solBWNot27Int(-0x5f23092812176ae90396c8d9e9c5c08042fdd74fd72ca1b1679418);
    assert assert_int224(~(-0x65d54f508ca37f9b05ac5e643a7feec0b61cd4b90d43e1bed8eabf1a)) == solBWNot28Int(-0x65d54f508ca37f9b05ac5e643a7feec0b61cd4b90d43e1bed8eabf1a);
    assert assert_int232(~(-0x44532cd55aae811e3fbded33191cda924838c12ff31ee58d2737de0efe)) == solBWNot29Int(-0x44532cd55aae811e3fbded33191cda924838c12ff31ee58d2737de0efe);
    assert assert_int240(~(-0x7082d1cd5dd0270640ea1787b79c9a0df294d4fbb15601c208db0832ccff)) == solBWNot30Int(-0x7082d1cd5dd0270640ea1787b79c9a0df294d4fbb15601c208db0832ccff);
    assert assert_int248(~(-0x724235e78dbc0168508672c3743907bb10e237728dbb5f2751dbdfc5107860)) == solBWNot31Int(-0x724235e78dbc0168508672c3743907bb10e237728dbb5f2751dbdfc5107860);
    assert assert_int256(~(-0x4f3d0531a12dd59091b5c589f5cc7cf4e39ec01e422527988261484b1475b7b7)) == solBWNot32Int(-0x4f3d0531a12dd59091b5c589f5cc7cf4e39ec01e422527988261484b1475b7b7);
}

rule checkBWNotHex() {
    /*
    for x in range(0,32):
        n = hex(random.randrange(2**(8*x),2**(8*(x+1))))
        print(f"assert ~{n} == solBWNot{x+1}UInt({n});")
    */
    assert ~0xfb == solBWNot1UInt(0xfb);
    assert ~0x579b == solBWNot2UInt(0x579b);
    assert ~0xa9f471 == solBWNot3UInt(0xa9f471);
    assert ~0xebd7dafd == solBWNot4UInt(0xebd7dafd);
    assert ~0x9113d190c9 == solBWNot5UInt(0x9113d190c9);
    assert ~0x4353ade66dec == solBWNot6UInt(0x4353ade66dec);
    assert ~0xeb70a7d383f2d9 == solBWNot7UInt(0xeb70a7d383f2d9);
    assert ~0xc423fb110bcbea66 == solBWNot8UInt(0xc423fb110bcbea66);
    assert ~0xc85c887e04521ab99f == solBWNot9UInt(0xc85c887e04521ab99f);
    assert ~0xdab2cc7e8bd0bc0baebe == solBWNot10UInt(0xdab2cc7e8bd0bc0baebe);
    assert ~0x22e51c3483c1fcd7c58108 == solBWNot11UInt(0x22e51c3483c1fcd7c58108);
    assert ~0x75064933ddec2aafec17a09 == solBWNot12UInt(0x75064933ddec2aafec17a09);
    assert ~0x2fa886d86458aeb01f7c589eb1 == solBWNot13UInt(0x2fa886d86458aeb01f7c589eb1);
    assert ~0xad2cacff4d311f97742247950349 == solBWNot14UInt(0xad2cacff4d311f97742247950349);
    assert ~0x3a8500e5508a0adcf0b5a0cd197afe == solBWNot15UInt(0x3a8500e5508a0adcf0b5a0cd197afe);
    assert ~0x1f5ab6a1905a9ddb4dcd466c7eaf9da6 == solBWNot16UInt(0x1f5ab6a1905a9ddb4dcd466c7eaf9da6);
    assert ~0x5ba0f2185d2047d7471a46307aba9e7921 == solBWNot17UInt(0x5ba0f2185d2047d7471a46307aba9e7921);
    assert ~0x626a1a5da481905a86047dbcbcc1a59ce294 == solBWNot18UInt(0x626a1a5da481905a86047dbcbcc1a59ce294);
    assert ~0x840e0d69b7443928d888b03ea9d614554fffeb == solBWNot19UInt(0x840e0d69b7443928d888b03ea9d614554fffeb);
    assert ~0xf9907399c34d9f947121f60a6cbbab188971dad5 == solBWNot20UInt(0xf9907399c34d9f947121f60a6cbbab188971dad5);
    assert ~0x76a35345f3c9818c24d9f26f7dca735d1dfe7718f == solBWNot21UInt(0x76a35345f3c9818c24d9f26f7dca735d1dfe7718f);
    assert ~0x8a485771949295ca8db09316d4ba7b88b5b41a1e7647 == solBWNot22UInt(0x8a485771949295ca8db09316d4ba7b88b5b41a1e7647);
    assert ~0xc71512e74fb1d83673da6bc5acf047bc92cf3581c05a33 == solBWNot23UInt(0xc71512e74fb1d83673da6bc5acf047bc92cf3581c05a33);
    assert ~0x6d1c1125da9d85676bc511b65b658e2701b4d3b0179440c6 == solBWNot24UInt(0x6d1c1125da9d85676bc511b65b658e2701b4d3b0179440c6);
    assert ~0x411f210134fb11228d99e95e939fac0b29aa037d45e5b8e17a == solBWNot25UInt(0x411f210134fb11228d99e95e939fac0b29aa037d45e5b8e17a);
    assert ~0x4bd1946807bed04055995071d5cdec179999df39c073f1a92e60 == solBWNot26UInt(0x4bd1946807bed04055995071d5cdec179999df39c073f1a92e60);
    assert ~0x347b772e94ab7678e22f9eab88cb36765e1904c4580dc6610d0e4a == solBWNot27UInt(0x347b772e94ab7678e22f9eab88cb36765e1904c4580dc6610d0e4a);
    assert ~0xe2d1f29ea5ace4ab2726998510bc36e7d57094de562cc6b405387348 == solBWNot28UInt(0xe2d1f29ea5ace4ab2726998510bc36e7d57094de562cc6b405387348);
    assert ~0x9038cdc6583be57d762ab311797daa61bd11dab747c64bbafe8b900e4f == solBWNot29UInt(0x9038cdc6583be57d762ab311797daa61bd11dab747c64bbafe8b900e4f);
    assert ~0x92d304dff800e80363c19c9ac9a0c4b2c5426b33f0f6955826110c6f7a8 == solBWNot30UInt(0x92d304dff800e80363c19c9ac9a0c4b2c5426b33f0f6955826110c6f7a8);
    assert ~0x800f6d4b43dcad9b2f196fb42a16b96d675c01fc90c16bb99ee75c05d2874f == solBWNot31UInt(0x800f6d4b43dcad9b2f196fb42a16b96d675c01fc90c16bb99ee75c05d2874f);
    assert ~0x8b297b13dfe5c7356e4d1f4c1f4b1940637ff40c6273209792f8c536783e6058 == solBWNot32UInt(0x8b297b13dfe5c7356e4d1f4c1f4b1940637ff40c6273209792f8c536783e6058);
}

rule checkBWNotViaImmediates() {
    /*
    for x in range(0,32):
        n = random.randrange(2**(8*x),2**(8*(x+1)))
        print(f"assert ~to_bytes{x+1}({n}) == solBWNot{x+1}(to_bytes{x+1}({n}));")
    */
    assert ~to_bytes1(174) == solBWNot1(to_bytes1(174));
    assert ~to_bytes2(19438) == solBWNot2(to_bytes2(19438));
    assert ~to_bytes3(9691903) == solBWNot3(to_bytes3(9691903));
    assert ~to_bytes4(2757035094) == solBWNot4(to_bytes4(2757035094));
    assert ~to_bytes5(122467993225) == solBWNot5(to_bytes5(122467993225));
    assert ~to_bytes6(218982227622585) == solBWNot6(to_bytes6(218982227622585));
    assert ~to_bytes7(34542661148918108) == solBWNot7(to_bytes7(34542661148918108));
    assert ~to_bytes8(16554391482540408677) == solBWNot8(to_bytes8(16554391482540408677));
    assert ~to_bytes9(1464837059702631443046) == solBWNot9(to_bytes9(1464837059702631443046));
    assert ~to_bytes10(742836798663608593519407) == solBWNot10(to_bytes10(742836798663608593519407));
    assert ~to_bytes11(223577910147697650804517324) == solBWNot11(to_bytes11(223577910147697650804517324));
    assert ~to_bytes12(22202384897295494048822823047) == solBWNot12(to_bytes12(22202384897295494048822823047));
    assert ~to_bytes13(7052692832552818943230917569536) == solBWNot13(to_bytes13(7052692832552818943230917569536));
    assert ~to_bytes14(4289380154171865116797757887084591) == solBWNot14(to_bytes14(4289380154171865116797757887084591));
    assert ~to_bytes15(1148885401079136713897048500352282943) == solBWNot15(to_bytes15(1148885401079136713897048500352282943));
    assert ~to_bytes16(68208145487867286625105106383479429415) == solBWNot16(to_bytes16(68208145487867286625105106383479429415));
    assert ~to_bytes17(75741127266615424242241377569407407880556) == solBWNot17(to_bytes17(75741127266615424242241377569407407880556));
    assert ~to_bytes18(14413766281506905660279354744566725039530712) == solBWNot18(to_bytes18(14413766281506905660279354744566725039530712));
    assert ~to_bytes19(3383007982036440978105111400769252079301750782) == solBWNot19(to_bytes19(3383007982036440978105111400769252079301750782));
    assert ~to_bytes20(1423553320631662531337267395528657500700318561531) == solBWNot20(to_bytes20(1423553320631662531337267395528657500700318561531));
    assert ~to_bytes21(91705696388182306620743703053892522966997523085119) == solBWNot21(to_bytes21(91705696388182306620743703053892522966997523085119));
    assert ~to_bytes22(93234623675420544990124737445989166671937311225586696) == solBWNot22(to_bytes22(93234623675420544990124737445989166671937311225586696));
    assert ~to_bytes23(24513573646272432942801044148206971562430323904026165121) == solBWNot23(to_bytes23(24513573646272432942801044148206971562430323904026165121));
    assert ~to_bytes24(3692402727082601569239134292608047055264334194324241531151) == solBWNot24(to_bytes24(3692402727082601569239134292608047055264334194324241531151));
    assert ~to_bytes25(766300582114684412995568754980390817862752597332269489645712) == solBWNot25(to_bytes25(766300582114684412995568754980390817862752597332269489645712));
    assert ~to_bytes26(326283636584758897862233564465110338114014338146152143654825517) == solBWNot26(to_bytes26(326283636584758897862233564465110338114014338146152143654825517));
    assert ~to_bytes27(18182805058382482407814017535878972972234366336604047540696925364) == solBWNot27(to_bytes27(18182805058382482407814017535878972972234366336604047540696925364));
    assert ~to_bytes28(17961790719112803623715038974254374259703762790145738213946993216576) == solBWNot28(to_bytes28(17961790719112803623715038974254374259703762790145738213946993216576));
    assert ~to_bytes29(5111851006109047712829514720474659527656020609495425702134009231920091) == solBWNot29(to_bytes29(5111851006109047712829514720474659527656020609495425702134009231920091));
    assert ~to_bytes30(1709410488806727320702675356530564181059595754922756136394250782493605201) == solBWNot30(to_bytes30(1709410488806727320702675356530564181059595754922756136394250782493605201));
    assert ~to_bytes31(113707527679248464284475827153754446651911016269489298273734672025881788141) == solBWNot31(to_bytes31(113707527679248464284475827153754446651911016269489298273734672025881788141));
    assert ~to_bytes32(22849204926562546326091407442800365423349379083136351235938212570720461720912) == solBWNot32(to_bytes32(22849204926562546326091407442800365423349379083136351235938212570720461720912));

}

rule checkBWNotViaAssignments() {
    /*
    for x in range(0,32):
        print(f"bytes{x+1} b{x+1} = to_bytes{x+1}({random.randrange(2**(8*x),2**(8*(x+1)))});")
    */
    bytes1 b1 = to_bytes1(42);
    bytes2 b2 = to_bytes2(49923);
    bytes3 b3 = to_bytes3(2574518);
    bytes4 b4 = to_bytes4(590683526);
    bytes5 b5 = to_bytes5(972131067623);
    bytes6 b6 = to_bytes6(69353497610327);
    bytes7 b7 = to_bytes7(35294137428080347);
    bytes8 b8 = to_bytes8(2982754125667427460);
    bytes9 b9 = to_bytes9(1360711150554960830855);
    bytes10 b10 = to_bytes10(1123658013156497319331414);
    bytes11 b11 = to_bytes11(100576604904710433209898909);
    bytes12 b12 = to_bytes12(23159956000170597494719864155);
    bytes13 b13 = to_bytes13(15818350503625029250356989989394);
    bytes14 b14 = to_bytes14(5003562773028227530521269729881349);
    bytes15 b15 = to_bytes15(622548763791097780265892196036228950);
    bytes16 b16 = to_bytes16(40420585273215042112831190760686664757);
    bytes17 b17 = to_bytes17(45909419866547942984147543067997537325811);
    bytes18 b18 = to_bytes18(13236288458611035176157876192927155528008698);
    bytes19 b19 = to_bytes19(513322217949469134255252938555298873982888692);
    bytes20 b20 = to_bytes20(953303529920306770105606489229413670837712165088);
    bytes21 b21 = to_bytes21(253327578470157013990168373498036306741135384348362);
    bytes22 b22 = to_bytes22(64227568929605648791156522278543656849041657974069488);
    bytes23 b23 = to_bytes23(14924502573176108468567243934766265718022817893946568404);
    bytes24 b24 = to_bytes24(3801916926901634191594215673498514939368911729513172398193);
    bytes25 b25 = to_bytes25(1243986637979511131899496581407620761147175850046395158522633);
    bytes26 b26 = to_bytes26(288473657363708336644333951685519426640957854888502870904876081);
    bytes27 b27 = to_bytes27(95656010149036676476928634086994510614240570643555959278623843978);
    bytes28 b28 = to_bytes28(24125931743859679891139082887886062943105806289495009023275785479974);
    bytes29 b29 = to_bytes29(3546822903836896985149016913309830293484669336409903524903978817324095);
    bytes30 b30 = to_bytes30(1255762932566913672332231365972832280583033579962929503531371699154039433);
    bytes31 b31 = to_bytes31(349128717703142634122463811724814939171103325694521809083144801690126955234);
    bytes32 b32 = to_bytes32(28399387871093824944033200330217239716158770506690374641284514475374280953018);

    assert ~b1 == solBWNot1(b1);
    assert ~b2 == solBWNot2(b2);
    assert ~b3 == solBWNot3(b3);
    assert ~b4 == solBWNot4(b4);
    assert ~b5 == solBWNot5(b5);
    assert ~b6 == solBWNot6(b6);
    assert ~b7 == solBWNot7(b7);
    assert ~b8 == solBWNot8(b8);
    assert ~b9 == solBWNot9(b9);
    assert ~b10 == solBWNot10(b10);
    assert ~b11 == solBWNot11(b11);
    assert ~b12 == solBWNot12(b12);
    assert ~b13 == solBWNot13(b13);
    assert ~b14 == solBWNot14(b14);
    assert ~b15 == solBWNot15(b15);
    assert ~b16 == solBWNot16(b16);
    assert ~b17 == solBWNot17(b17);
    assert ~b18 == solBWNot18(b18);
    assert ~b19 == solBWNot19(b19);
    assert ~b20 == solBWNot20(b20);
    assert ~b21 == solBWNot21(b21);
    assert ~b22 == solBWNot22(b22);
    assert ~b23 == solBWNot23(b23);
    assert ~b24 == solBWNot24(b24);
    assert ~b25 == solBWNot25(b25);
    assert ~b26 == solBWNot26(b26);
    assert ~b27 == solBWNot27(b27);
    assert ~b28 == solBWNot28(b28);
    assert ~b29 == solBWNot29(b29);
    assert ~b30 == solBWNot30(b30);
    assert ~b31 == solBWNot31(b31);
    assert ~b32 == solBWNot32(b32);
}